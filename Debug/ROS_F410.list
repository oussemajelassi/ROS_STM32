
ROS_F410.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050e8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054f0  080054f0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080054f0  080054f0  000154f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054f8  080054f8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080054f8  080054f8  000154f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005500  08005500  00015500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a90  20000088  0800558c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b18  0800558c  00020b18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109ac  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002747  00000000  00000000  00030a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  000331b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  00033bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b64  00000000  00000000  00034500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d63d  00000000  00000000  0004c064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007dd85  00000000  00000000  000596a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7426  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cdc  00000000  00000000  000d7478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000088 	.word	0x20000088
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005298 	.word	0x08005298

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000008c 	.word	0x2000008c
 8000204:	08005298 	.word	0x08005298

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
setup();
 8000520:	f001 f8d8 	bl	80016d4 <_Z5setupv>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f002 f96a 	bl	80027fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f80a 	bl	8000540 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 f8d2 	bl	80006d4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000530:	f000 f8a8 	bl	8000684 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8000534:	f000 f878 	bl	8000628 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  { loop();
 8000538:	f001 f8f0 	bl	800171c <_Z4loopv>
 800053c:	e7fc      	b.n	8000538 <main+0x1c>
	...

08000540 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 031c 	add.w	r3, r7, #28
 800054a:	2234      	movs	r2, #52	; 0x34
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f004 fd18 	bl	8004f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 0308 	add.w	r3, r7, #8
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b2d      	ldr	r3, [pc, #180]	; (8000620 <_Z18SystemClock_Configv+0xe0>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a2c      	ldr	r2, [pc, #176]	; (8000620 <_Z18SystemClock_Configv+0xe0>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b2a      	ldr	r3, [pc, #168]	; (8000620 <_Z18SystemClock_Configv+0xe0>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <_Z18SystemClock_Configv+0xe4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a26      	ldr	r2, [pc, #152]	; (8000624 <_Z18SystemClock_Configv+0xe4>)
 800058a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b24      	ldr	r3, [pc, #144]	; (8000624 <_Z18SystemClock_Configv+0xe4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2302      	movs	r3, #2
 80005aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b0:	2308      	movs	r3, #8
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80005b4:	2354      	movs	r3, #84	; 0x54
 80005b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005bc:	2304      	movs	r3, #4
 80005be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 031c 	add.w	r3, r7, #28
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 f9c3 	bl	8003954 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	bf14      	ite	ne
 80005d4:	2301      	movne	r3, #1
 80005d6:	2300      	moveq	r3, #0
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80005de:	f000 f8e7 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2302      	movs	r3, #2
 80005e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2102      	movs	r1, #2
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 ffc8 	bl	8003594 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	bf14      	ite	ne
 800060a:	2301      	movne	r3, #1
 800060c:	2300      	moveq	r3, #0
 800060e:	b2db      	uxtb	r3, r3
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000614:	f000 f8cc 	bl	80007b0 <Error_Handler>
  }
}
 8000618:	bf00      	nop
 800061a:	3750      	adds	r7, #80	; 0x50
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <_ZL19MX_USART2_UART_Initv+0x54>)
 800062e:	4a14      	ldr	r2, [pc, #80]	; (8000680 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000634:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <_ZL19MX_USART2_UART_Initv+0x54>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000646:	4b0d      	ldr	r3, [pc, #52]	; (800067c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <_ZL19MX_USART2_UART_Initv+0x54>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <_ZL19MX_USART2_UART_Initv+0x54>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065e:	4807      	ldr	r0, [pc, #28]	; (800067c <_ZL19MX_USART2_UART_Initv+0x54>)
 8000660:	f003 fbfc 	bl	8003e5c <HAL_UART_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	bf14      	ite	ne
 800066a:	2301      	movne	r3, #1
 800066c:	2300      	moveq	r3, #0
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000674:	f000 f89c 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200000a4 	.word	0x200000a4
 8000680:	40004400 	.word	0x40004400

08000684 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <_ZL11MX_DMA_Initv+0x4c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a0f      	ldr	r2, [pc, #60]	; (80006d0 <_ZL11MX_DMA_Initv+0x4c>)
 8000694:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <_ZL11MX_DMA_Initv+0x4c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	2010      	movs	r0, #16
 80006ac:	f002 fa17 	bl	8002ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006b0:	2010      	movs	r0, #16
 80006b2:	f002 fa30 	bl	8002b16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	2011      	movs	r0, #17
 80006bc:	f002 fa0f 	bl	8002ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006c0:	2011      	movs	r0, #17
 80006c2:	f002 fa28 	bl	8002b16 <HAL_NVIC_EnableIRQ>

}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800

080006d4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <_ZL12MX_GPIO_Initv+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a2c      	ldr	r2, [pc, #176]	; (80007a4 <_ZL12MX_GPIO_Initv+0xd0>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <_ZL12MX_GPIO_Initv+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <_ZL12MX_GPIO_Initv+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a25      	ldr	r2, [pc, #148]	; (80007a4 <_ZL12MX_GPIO_Initv+0xd0>)
 8000710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <_ZL12MX_GPIO_Initv+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <_ZL12MX_GPIO_Initv+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <_ZL12MX_GPIO_Initv+0xd0>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <_ZL12MX_GPIO_Initv+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <_ZL12MX_GPIO_Initv+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <_ZL12MX_GPIO_Initv+0xd0>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <_ZL12MX_GPIO_Initv+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2120      	movs	r1, #32
 800075e:	4812      	ldr	r0, [pc, #72]	; (80007a8 <_ZL12MX_GPIO_Initv+0xd4>)
 8000760:	f002 fee4 	bl	800352c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800076a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800076e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	480c      	ldr	r0, [pc, #48]	; (80007ac <_ZL12MX_GPIO_Initv+0xd8>)
 800077c:	f002 fd62 	bl	8003244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000780:	2320      	movs	r3, #32
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4804      	ldr	r0, [pc, #16]	; (80007a8 <_ZL12MX_GPIO_Initv+0xd4>)
 8000798:	f002 fd54 	bl	8003244 <HAL_GPIO_Init>

}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	; 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020000 	.word	0x40020000
 80007ac:	40020800 	.word	0x40020800

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <Error_Handler+0x8>
	...

080007bc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <_ZN3ros3MsgC1Ev+0x1c>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4618      	mov	r0, r3
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	080054c0 	.word	0x080054c0

080007dc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ffe8 	bl	80007bc <_ZN3ros3MsgC1Ev>
 80007ec:	4a06      	ldr	r2, [pc, #24]	; (8000808 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2200      	movs	r2, #0
 80007f6:	711a      	strb	r2, [r3, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a04      	ldr	r2, [pc, #16]	; (800080c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80007fc:	609a      	str	r2, [r3, #8]
    {
    }
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	080054a8 	.word	0x080054a8
 800080c:	080052b0 	.word	0x080052b0

08000810 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	4413      	add	r3, r2
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	7912      	ldrb	r2, [r2, #4]
 8000828:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	3301      	adds	r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fce7 	bl	8000208 <strlen>
 800083a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	683a      	ldr	r2, [r7, #0]
 8000840:	4413      	add	r3, r2
 8000842:	68b9      	ldr	r1, [r7, #8]
 8000844:	4618      	mov	r0, r3
 8000846:	f000 ff89 	bl	800175c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	3304      	adds	r3, #4
 800084e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	18d0      	adds	r0, r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	4619      	mov	r1, r3
 800085e:	f004 fb83 	bl	8004f68 <memcpy>
      offset += length_msg;
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	4413      	add	r3, r2
 8000868:	60fb      	str	r3, [r7, #12]
      return offset;
 800086a:	68fb      	ldr	r3, [r7, #12]
    }
 800086c:	4618      	mov	r0, r3
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	4413      	add	r3, r2
 8000888:	781a      	ldrb	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	3301      	adds	r3, #1
 8000892:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	683a      	ldr	r2, [r7, #0]
 8000898:	441a      	add	r2, r3
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	4611      	mov	r1, r2
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 ff79 	bl	8001798 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	3304      	adds	r3, #4
 80008aa:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	4413      	add	r3, r2
 80008b6:	697a      	ldr	r2, [r7, #20]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d20c      	bcs.n	80008d6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	441a      	add	r2, r3
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	3b01      	subs	r3, #1
 80008c6:	6839      	ldr	r1, [r7, #0]
 80008c8:	440b      	add	r3, r1
 80008ca:	7812      	ldrb	r2, [r2, #0]
 80008cc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	3301      	adds	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	e7ec      	b.n	80008b0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4413      	add	r3, r2
 80008dc:	3b01      	subs	r3, #1
 80008de:	683a      	ldr	r2, [r7, #0]
 80008e0:	4413      	add	r3, r2
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	3b01      	subs	r3, #1
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	441a      	add	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	4413      	add	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
     return offset;
 80008fa:	693b      	ldr	r3, [r7, #16]
    }
 80008fc:	4618      	mov	r0, r3
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800090e:	4618      	mov	r0, r3
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	080052b4 	.word	0x080052b4

08000920 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	080052c8 	.word	0x080052c8

0800093c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff ff38 	bl	80007bc <_ZN3ros3MsgC1Ev>
 800094c:	4a0c      	ldr	r2, [pc, #48]	; (8000980 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	61da      	str	r2, [r3, #28]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	08005490 	.word	0x08005490

08000984 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6859      	ldr	r1, [r3, #4]
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	4413      	add	r3, r2
 800099c:	b2ca      	uxtb	r2, r1
 800099e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	0a19      	lsrs	r1, r3, #8
 80009a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a8:	3301      	adds	r3, #1
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	4413      	add	r3, r2
 80009ae:	b2ca      	uxtb	r2, r1
 80009b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	0c19      	lsrs	r1, r3, #16
 80009b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ba:	3302      	adds	r3, #2
 80009bc:	683a      	ldr	r2, [r7, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	b2ca      	uxtb	r2, r1
 80009c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	0e19      	lsrs	r1, r3, #24
 80009ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009cc:	3303      	adds	r3, #3
 80009ce:	683a      	ldr	r2, [r7, #0]
 80009d0:	4413      	add	r3, r2
 80009d2:	b2ca      	uxtb	r2, r1
 80009d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80009d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d8:	3304      	adds	r3, #4
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	6a3a      	ldr	r2, [r7, #32]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d22b      	bcs.n	8000a42 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	68da      	ldr	r2, [r3, #12]
 80009ee:	6a3b      	ldr	r3, [r7, #32]
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	4413      	add	r3, r2
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80009f8:	6939      	ldr	r1, [r7, #16]
 80009fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fc:	683a      	ldr	r2, [r7, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	b2ca      	uxtb	r2, r1
 8000a02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	0a19      	lsrs	r1, r3, #8
 8000a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	4413      	add	r3, r2
 8000a10:	b2ca      	uxtb	r2, r1
 8000a12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	0c19      	lsrs	r1, r3, #16
 8000a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1a:	3302      	adds	r3, #2
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	b2ca      	uxtb	r2, r1
 8000a22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	0e19      	lsrs	r1, r3, #24
 8000a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2a:	3303      	adds	r3, #3
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	b2ca      	uxtb	r2, r1
 8000a32:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a36:	3304      	adds	r3, #4
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000a3a:	6a3b      	ldr	r3, [r7, #32]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	623b      	str	r3, [r7, #32]
 8000a40:	e7ce      	b.n	80009e0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6919      	ldr	r1, [r3, #16]
 8000a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a48:	683a      	ldr	r2, [r7, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	b2ca      	uxtb	r2, r1
 8000a4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	691b      	ldr	r3, [r3, #16]
 8000a54:	0a19      	lsrs	r1, r3, #8
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	3301      	adds	r3, #1
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b2ca      	uxtb	r2, r1
 8000a60:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	691b      	ldr	r3, [r3, #16]
 8000a66:	0c19      	lsrs	r1, r3, #16
 8000a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	b2ca      	uxtb	r2, r1
 8000a72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	0e19      	lsrs	r1, r3, #24
 8000a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7c:	3303      	adds	r3, #3
 8000a7e:	683a      	ldr	r2, [r7, #0]
 8000a80:	4413      	add	r3, r2
 8000a82:	b2ca      	uxtb	r2, r1
 8000a84:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a88:	3304      	adds	r3, #4
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	69fa      	ldr	r2, [r7, #28]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d22b      	bcs.n	8000af2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	699a      	ldr	r2, [r3, #24]
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000aa8:	68f9      	ldr	r1, [r7, #12]
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aac:	683a      	ldr	r2, [r7, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	b2ca      	uxtb	r2, r1
 8000ab2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	0a19      	lsrs	r1, r3, #8
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aba:	3301      	adds	r3, #1
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	b2ca      	uxtb	r2, r1
 8000ac2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	0c19      	lsrs	r1, r3, #16
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aca:	3302      	adds	r3, #2
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	b2ca      	uxtb	r2, r1
 8000ad2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	0e19      	lsrs	r1, r3, #24
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ada:	3303      	adds	r3, #3
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	b2ca      	uxtb	r2, r1
 8000ae2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae6:	3304      	adds	r3, #4
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3301      	adds	r3, #1
 8000aee:	61fb      	str	r3, [r7, #28]
 8000af0:	e7ce      	b.n	8000a90 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	69d9      	ldr	r1, [r3, #28]
 8000af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af8:	683a      	ldr	r2, [r7, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	b2ca      	uxtb	r2, r1
 8000afe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	69db      	ldr	r3, [r3, #28]
 8000b04:	0a19      	lsrs	r1, r3, #8
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	3301      	adds	r3, #1
 8000b0a:	683a      	ldr	r2, [r7, #0]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	b2ca      	uxtb	r2, r1
 8000b10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	0c19      	lsrs	r1, r3, #16
 8000b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1a:	3302      	adds	r3, #2
 8000b1c:	683a      	ldr	r2, [r7, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	b2ca      	uxtb	r2, r1
 8000b22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	69db      	ldr	r3, [r3, #28]
 8000b28:	0e19      	lsrs	r1, r3, #24
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	3303      	adds	r3, #3
 8000b2e:	683a      	ldr	r2, [r7, #0]
 8000b30:	4413      	add	r3, r2
 8000b32:	b2ca      	uxtb	r2, r1
 8000b34:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	3304      	adds	r3, #4
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	69db      	ldr	r3, [r3, #28]
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d228      	bcs.n	8000b9c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fb56 	bl	8000208 <strlen>
 8000b5c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	683a      	ldr	r2, [r7, #0]
 8000b62:	4413      	add	r3, r2
 8000b64:	6979      	ldr	r1, [r7, #20]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 fdf8 	bl	800175c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6e:	3304      	adds	r3, #4
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b74:	683a      	ldr	r2, [r7, #0]
 8000b76:	18d0      	adds	r0, r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4413      	add	r3, r2
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	4619      	mov	r1, r3
 8000b88:	f004 f9ee 	bl	8004f68 <memcpy>
      offset += length_stringsi;
 8000b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	4413      	add	r3, r2
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	3301      	adds	r3, #1
 8000b98:	61bb      	str	r3, [r7, #24]
 8000b9a:	e7d1      	b.n	8000b40 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b08e      	sub	sp, #56	; 0x38
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	4413      	add	r3, r2
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	021b      	lsls	r3, r3, #8
 8000bca:	6a3a      	ldr	r2, [r7, #32]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	041b      	lsls	r3, r3, #16
 8000bdc:	6a3a      	ldr	r2, [r7, #32]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be4:	3303      	adds	r3, #3
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	4413      	add	r3, r2
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	061b      	lsls	r3, r3, #24
 8000bee:	6a3a      	ldr	r2, [r7, #32]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bf6:	3304      	adds	r3, #4
 8000bf8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	6a3a      	ldr	r2, [r7, #32]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d90a      	bls.n	8000c1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	68da      	ldr	r2, [r3, #12]
 8000c08:	6a3b      	ldr	r3, [r7, #32]
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4610      	mov	r0, r2
 8000c10:	f004 f9c0 	bl	8004f94 <realloc>
 8000c14:	4602      	mov	r2, r0
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a3a      	ldr	r2, [r7, #32]
 8000c1e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000c20:	2300      	movs	r3, #0
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d236      	bcs.n	8000c9c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c36:	6839      	ldr	r1, [r7, #0]
 8000c38:	440a      	add	r2, r1
 8000c3a:	7812      	ldrb	r2, [r2, #0]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c44:	3301      	adds	r3, #1
 8000c46:	6839      	ldr	r1, [r7, #0]
 8000c48:	440b      	add	r3, r1
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	021b      	lsls	r3, r3, #8
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c56:	3302      	adds	r3, #2
 8000c58:	6839      	ldr	r1, [r7, #0]
 8000c5a:	440b      	add	r3, r1
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	041b      	lsls	r3, r3, #16
 8000c60:	4313      	orrs	r3, r2
 8000c62:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c68:	3303      	adds	r3, #3
 8000c6a:	6839      	ldr	r1, [r7, #0]
 8000c6c:	440b      	add	r3, r1
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	061b      	lsls	r3, r3, #24
 8000c72:	4313      	orrs	r3, r2
 8000c74:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c7e:	3304      	adds	r3, #4
 8000c80:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	4413      	add	r3, r2
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	3208      	adds	r2, #8
 8000c90:	6812      	ldr	r2, [r2, #0]
 8000c92:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c96:	3301      	adds	r3, #1
 8000c98:	633b      	str	r3, [r7, #48]	; 0x30
 8000c9a:	e7c3      	b.n	8000c24 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c9e:	683a      	ldr	r2, [r7, #0]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca8:	3301      	adds	r3, #1
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	4413      	add	r3, r2
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	69fa      	ldr	r2, [r7, #28]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cba:	3302      	adds	r3, #2
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	041b      	lsls	r3, r3, #16
 8000cc4:	69fa      	ldr	r2, [r7, #28]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ccc:	3303      	adds	r3, #3
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	061b      	lsls	r3, r3, #24
 8000cd6:	69fa      	ldr	r2, [r7, #28]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cde:	3304      	adds	r3, #4
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	69fa      	ldr	r2, [r7, #28]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d90a      	bls.n	8000d02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	699a      	ldr	r2, [r3, #24]
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4610      	mov	r0, r2
 8000cf8:	f004 f94c 	bl	8004f94 <realloc>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	69fa      	ldr	r2, [r7, #28]
 8000d06:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d236      	bcs.n	8000d84 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d1e:	6839      	ldr	r1, [r7, #0]
 8000d20:	440a      	add	r2, r1
 8000d22:	7812      	ldrb	r2, [r2, #0]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	6839      	ldr	r1, [r7, #0]
 8000d30:	440b      	add	r3, r1
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	021b      	lsls	r3, r3, #8
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d3e:	3302      	adds	r3, #2
 8000d40:	6839      	ldr	r1, [r7, #0]
 8000d42:	440b      	add	r3, r1
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	041b      	lsls	r3, r3, #16
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d50:	3303      	adds	r3, #3
 8000d52:	6839      	ldr	r1, [r7, #0]
 8000d54:	440b      	add	r3, r1
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	061b      	lsls	r3, r3, #24
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8000d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d66:	3304      	adds	r3, #4
 8000d68:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	699a      	ldr	r2, [r3, #24]
 8000d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	3214      	adds	r2, #20
 8000d78:	6812      	ldr	r2, [r2, #0]
 8000d7a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8000d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7e:	3301      	adds	r3, #1
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d82:	e7c3      	b.n	8000d0c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	4413      	add	r3, r2
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d90:	3301      	adds	r3, #1
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	4413      	add	r3, r2
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	021b      	lsls	r3, r3, #8
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da2:	3302      	adds	r3, #2
 8000da4:	683a      	ldr	r2, [r7, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	041b      	lsls	r3, r3, #16
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db4:	3303      	adds	r3, #3
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	4413      	add	r3, r2
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	061b      	lsls	r3, r3, #24
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8000dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d90a      	bls.n	8000dea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4610      	mov	r0, r2
 8000de0:	f004 f8d8 	bl	8004f94 <realloc>
 8000de4:	4602      	mov	r2, r0
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69db      	ldr	r3, [r3, #28]
 8000df8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d23f      	bcs.n	8000e7e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8000dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	441a      	add	r2, r3
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 fcc4 	bl	8001798 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e12:	3304      	adds	r3, #4
 8000e14:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
 8000e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d20c      	bcs.n	8000e40 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2a:	441a      	add	r2, r3
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	6839      	ldr	r1, [r7, #0]
 8000e32:	440b      	add	r3, r1
 8000e34:	7812      	ldrb	r2, [r2, #0]
 8000e36:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e3e:	e7ec      	b.n	8000e1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8000e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4413      	add	r3, r2
 8000e46:	3b01      	subs	r3, #1
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8000e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e52:	3b01      	subs	r3, #1
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	441a      	add	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8000e5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4413      	add	r3, r2
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	3220      	adds	r2, #32
 8000e72:	6812      	ldr	r2, [r2, #0]
 8000e74:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8000e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e78:	3301      	adds	r3, #1
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e7c:	e7ba      	b.n	8000df4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8000e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8000e80:	4618      	mov	r0, r3
 8000e82:	3738      	adds	r7, #56	; 0x38
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	080053fc 	.word	0x080053fc

08000ea4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8000eae:	4618      	mov	r0, r3
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	080052ec 	.word	0x080052ec

08000ec0 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fc76 	bl	80007bc <_ZN3ros3MsgC1Ev>
 8000ed0:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	809a      	strh	r2, [r3, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a09      	ldr	r2, [pc, #36]	; (8000f04 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a06      	ldr	r2, [pc, #24]	; (8000f04 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000eec:	611a      	str	r2, [r3, #16]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
    {
    }
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	08005478 	.word	0x08005478
 8000f04:	080052b0 	.word	0x080052b0

08000f08 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	8899      	ldrh	r1, [r3, #4]
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	683a      	ldr	r2, [r7, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b2ca      	uxtb	r2, r1
 8000f22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	889b      	ldrh	r3, [r3, #4]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	b299      	uxth	r1, r3
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	b2ca      	uxtb	r2, r1
 8000f36:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff f960 	bl	8000208 <strlen>
 8000f48:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	69b9      	ldr	r1, [r7, #24]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 fc02 	bl	800175c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	18d0      	adds	r0, r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f003 fffc 	bl	8004f68 <memcpy>
      offset += length_topic_name;
 8000f70:	69fa      	ldr	r2, [r7, #28]
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	4413      	add	r3, r2
 8000f76:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff f943 	bl	8000208 <strlen>
 8000f82:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	4413      	add	r3, r2
 8000f8a:	6979      	ldr	r1, [r7, #20]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fbe5 	bl	800175c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3304      	adds	r3, #4
 8000f96:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	18d0      	adds	r0, r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f003 ffdf 	bl	8004f68 <memcpy>
      offset += length_message_type;
 8000faa:	69fa      	ldr	r2, [r7, #28]
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	4413      	add	r3, r2
 8000fb0:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff f926 	bl	8000208 <strlen>
 8000fbc:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	6939      	ldr	r1, [r7, #16]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 fbc8 	bl	800175c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	3304      	adds	r3, #4
 8000fd0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	18d0      	adds	r0, r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f003 ffc2 	bl	8004f68 <memcpy>
      offset += length_md5sum;
 8000fe4:	69fa      	ldr	r2, [r7, #28]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4413      	add	r3, r2
 8000fea:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000ff2:	68f9      	ldr	r1, [r7, #12]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	b2ca      	uxtb	r2, r1
 8000ffc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	0a19      	lsrs	r1, r3, #8
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3301      	adds	r3, #1
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	4413      	add	r3, r2
 800100a:	b2ca      	uxtb	r2, r1
 800100c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	0c19      	lsrs	r1, r3, #16
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3302      	adds	r3, #2
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	4413      	add	r3, r2
 800101a:	b2ca      	uxtb	r2, r1
 800101c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	0e19      	lsrs	r1, r3, #24
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3303      	adds	r3, #3
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	4413      	add	r3, r2
 800102a:	b2ca      	uxtb	r2, r1
 800102c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	61fb      	str	r3, [r7, #28]
      return offset;
 8001034:	69fb      	ldr	r3, [r7, #28]
    }
 8001036:	4618      	mov	r0, r3
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800103e:	b580      	push	{r7, lr}
 8001040:	b08a      	sub	sp, #40	; 0x28
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	4413      	add	r3, r2
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b29a      	uxth	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	889b      	ldrh	r3, [r3, #4]
 800105e:	b21a      	sxth	r2, r3
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	3301      	adds	r3, #1
 8001064:	6839      	ldr	r1, [r7, #0]
 8001066:	440b      	add	r3, r1
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21b      	sxth	r3, r3
 8001072:	b29a      	uxth	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	3302      	adds	r3, #2
 800107c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	441a      	add	r2, r3
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4611      	mov	r1, r2
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fb84 	bl	8001798 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	3304      	adds	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	4413      	add	r3, r2
 80010a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d20c      	bcs.n	80010c0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	441a      	add	r2, r3
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	3b01      	subs	r3, #1
 80010b0:	6839      	ldr	r1, [r7, #0]
 80010b2:	440b      	add	r3, r1
 80010b4:	7812      	ldrb	r2, [r2, #0]
 80010b6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	3301      	adds	r3, #1
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
 80010be:	e7ec      	b.n	800109a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	4413      	add	r3, r2
 80010c6:	3b01      	subs	r3, #1
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	441a      	add	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	4413      	add	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	441a      	add	r2, r3
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fb51 	bl	8001798 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	3304      	adds	r3, #4
 80010fa:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	623b      	str	r3, [r7, #32]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4413      	add	r3, r2
 8001106:	6a3a      	ldr	r2, [r7, #32]
 8001108:	429a      	cmp	r2, r3
 800110a:	d20c      	bcs.n	8001126 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	6a3b      	ldr	r3, [r7, #32]
 8001110:	441a      	add	r2, r3
 8001112:	6a3b      	ldr	r3, [r7, #32]
 8001114:	3b01      	subs	r3, #1
 8001116:	6839      	ldr	r1, [r7, #0]
 8001118:	440b      	add	r3, r1
 800111a:	7812      	ldrb	r2, [r2, #0]
 800111c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800111e:	6a3b      	ldr	r3, [r7, #32]
 8001120:	3301      	adds	r3, #1
 8001122:	623b      	str	r3, [r7, #32]
 8001124:	e7ec      	b.n	8001100 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4413      	add	r3, r2
 800112c:	3b01      	subs	r3, #1
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	4413      	add	r3, r2
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	3b01      	subs	r3, #1
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	441a      	add	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4413      	add	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	441a      	add	r2, r3
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f000 fb1e 	bl	8001798 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	3304      	adds	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	61fb      	str	r3, [r7, #28]
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	69fa      	ldr	r2, [r7, #28]
 800116e:	429a      	cmp	r2, r3
 8001170:	d20c      	bcs.n	800118c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	441a      	add	r2, r3
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	3b01      	subs	r3, #1
 800117c:	6839      	ldr	r1, [r7, #0]
 800117e:	440b      	add	r3, r1
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	3301      	adds	r3, #1
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	e7ec      	b.n	8001166 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4413      	add	r3, r2
 8001192:	3b01      	subs	r3, #1
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	4413      	add	r3, r2
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	3b01      	subs	r3, #1
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	441a      	add	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4413      	add	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	6839      	ldr	r1, [r7, #0]
 80011ba:	440a      	add	r2, r1
 80011bc:	7812      	ldrb	r2, [r2, #0]
 80011be:	4313      	orrs	r3, r2
 80011c0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	3301      	adds	r3, #1
 80011c8:	6839      	ldr	r1, [r7, #0]
 80011ca:	440b      	add	r3, r1
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	4313      	orrs	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	3302      	adds	r3, #2
 80011da:	6839      	ldr	r1, [r7, #0]
 80011dc:	440b      	add	r3, r1
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	041b      	lsls	r3, r3, #16
 80011e2:	4313      	orrs	r3, r2
 80011e4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	3303      	adds	r3, #3
 80011ec:	6839      	ldr	r1, [r7, #0]
 80011ee:	440b      	add	r3, r1
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	061b      	lsls	r3, r3, #24
 80011f4:	4313      	orrs	r3, r2
 80011f6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	3304      	adds	r3, #4
 8001202:	61bb      	str	r3, [r7, #24]
     return offset;
 8001204:	69bb      	ldr	r3, [r7, #24]
    }
 8001206:	4618      	mov	r0, r3
 8001208:	3728      	adds	r7, #40	; 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	08005310 	.word	0x08005310

0800122c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	0800532c 	.word	0x0800532c

08001248 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
      data()
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff faa0 	bl	80007bc <_ZN3ros3MsgC1Ev>
 800127c:	4a06      	ldr	r2, [pc, #24]	; (8001298 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3304      	adds	r3, #4
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ffde 	bl	8001248 <_ZN3ros4TimeC1Ev>
    {
    }
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	08005460 	.word	0x08005460

0800129c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6859      	ldr	r1, [r3, #4]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	b2ca      	uxtb	r2, r1
 80012b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	0a19      	lsrs	r1, r3, #8
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3301      	adds	r3, #1
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	4413      	add	r3, r2
 80012c6:	b2ca      	uxtb	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	0c19      	lsrs	r1, r3, #16
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	3302      	adds	r3, #2
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	b2ca      	uxtb	r2, r1
 80012da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	0e19      	lsrs	r1, r3, #24
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	3303      	adds	r3, #3
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	4413      	add	r3, r2
 80012ea:	b2ca      	uxtb	r2, r1
 80012ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	3304      	adds	r3, #4
 80012f2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6899      	ldr	r1, [r3, #8]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	4413      	add	r3, r2
 80012fe:	b2ca      	uxtb	r2, r1
 8001300:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	0a19      	lsrs	r1, r3, #8
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3301      	adds	r3, #1
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	4413      	add	r3, r2
 8001310:	b2ca      	uxtb	r2, r1
 8001312:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	0c19      	lsrs	r1, r3, #16
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3302      	adds	r3, #2
 800131e:	683a      	ldr	r2, [r7, #0]
 8001320:	4413      	add	r3, r2
 8001322:	b2ca      	uxtb	r2, r1
 8001324:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	0e19      	lsrs	r1, r3, #24
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3303      	adds	r3, #3
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	4413      	add	r3, r2
 8001334:	b2ca      	uxtb	r2, r1
 8001336:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3304      	adds	r3, #4
 800133c:	60fb      	str	r3, [r7, #12]
      return offset;
 800133e:	68fb      	ldr	r3, [r7, #12]
    }
 8001340:	4618      	mov	r0, r3
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	4413      	add	r3, r2
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3301      	adds	r3, #1
 8001370:	6839      	ldr	r1, [r7, #0]
 8001372:	440b      	add	r3, r1
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	431a      	orrs	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	3302      	adds	r3, #2
 8001386:	6839      	ldr	r1, [r7, #0]
 8001388:	440b      	add	r3, r1
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	041b      	lsls	r3, r3, #16
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3303      	adds	r3, #3
 800139c:	6839      	ldr	r1, [r7, #0]
 800139e:	440b      	add	r3, r1
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	061b      	lsls	r3, r3, #24
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	3304      	adds	r3, #4
 80013ae:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	4413      	add	r3, r2
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3301      	adds	r3, #1
 80013c6:	6839      	ldr	r1, [r7, #0]
 80013c8:	440b      	add	r3, r1
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3302      	adds	r3, #2
 80013dc:	6839      	ldr	r1, [r7, #0]
 80013de:	440b      	add	r3, r1
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	041b      	lsls	r3, r3, #16
 80013e4:	431a      	orrs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	3303      	adds	r3, #3
 80013f2:	6839      	ldr	r1, [r7, #0]
 80013f4:	440b      	add	r3, r1
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	061b      	lsls	r3, r3, #24
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	3304      	adds	r3, #4
 8001404:	60fb      	str	r3, [r7, #12]
     return offset;
 8001406:	68fb      	ldr	r3, [r7, #12]
    }
 8001408:	4618      	mov	r0, r3
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	08005350 	.word	0x08005350

08001430 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	08005360 	.word	0x08005360

0800144c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	611a      	str	r2, [r3, #16]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4618      	mov	r0, r3
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68d8      	ldr	r0, [r3, #12]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6891      	ldr	r1, [r2, #8]
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	4798      	blx	r3
 8001498:	4603      	mov	r3, r0
  };
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
  }
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <_ZN13STM32HardwareC1Ev>:


class STM32Hardware
{
public:
	STM32Hardware() {
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
	}
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <_ZN13STM32Hardware4initEv>:

	void init() {
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <_ZN13STM32Hardware4readEv>:

	// Read a byte of data from ROS connection.
	// If no data , returns -1
	int read()
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	{
		uint32_t r;
		uint8_t ch = -1;
 80014ec:	23ff      	movs	r3, #255	; 0xff
 80014ee:	72fb      	strb	r3, [r7, #11]

		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <_ZN13STM32Hardware4readEv+0x50>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <_ZN13STM32Hardware4readEv+0x50>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0220 	bic.w	r2, r2, #32
 80014fe:	60da      	str	r2, [r3, #12]
		r = ringbuffer_getchar(&rb, &ch);
 8001500:	f107 030b 	add.w	r3, r7, #11
 8001504:	4619      	mov	r1, r3
 8001506:	480c      	ldr	r0, [pc, #48]	; (8001538 <_ZN13STM32Hardware4readEv+0x54>)
 8001508:	f000 ff58 	bl	80023bc <_Z18ringbuffer_getcharP10ringbufferPh>
 800150c:	60f8      	str	r0, [r7, #12]
		__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <_ZN13STM32Hardware4readEv+0x50>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <_ZN13STM32Hardware4readEv+0x50>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f042 0220 	orr.w	r2, r2, #32
 800151c:	60da      	str	r2, [r3, #12]

		if (1 == r)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d101      	bne.n	8001528 <_ZN13STM32Hardware4readEv+0x44>
			return ch;
 8001524:	7afb      	ldrb	r3, [r7, #11]
 8001526:	e001      	b.n	800152c <_ZN13STM32Hardware4readEv+0x48>
		else
			return -1;
 8001528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200000a4 	.word	0x200000a4
 8001538:	200005a8 	.word	0x200005a8

0800153c <_ZN13STM32Hardware5writeEPhi>:

	// Send a byte of data to ROS connection
	void write(uint8_t* data, int length)
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
	{
		HAL_UART_Transmit(&huart2, data, length, HAL_MAX_DELAY);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	b29a      	uxth	r2, r3
 800154c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	4803      	ldr	r0, [pc, #12]	; (8001560 <_ZN13STM32Hardware5writeEPhi+0x24>)
 8001554:	f002 fccf 	bl	8003ef6 <HAL_UART_Transmit>
	}
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200000a4 	.word	0x200000a4

08001564 <_ZN13STM32Hardware4timeEv>:

	// Returns milliseconds since start of program
	unsigned long time(void)
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	{
		return HAL_GetTick();
 800156c:	f001 f9ac 	bl	80028c8 <HAL_GetTick>
 8001570:	4603      	mov	r3, r0
	}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
      data("")
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff f918 	bl	80007bc <_ZN3ros3MsgC1Ev>
 800158c:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <_ZN8std_msgs6StringC1Ev+0x28>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001596:	605a      	str	r2, [r3, #4]
    {
    }
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	08005434 	.word	0x08005434
 80015a8:	080052b0 	.word	0x080052b0

080015ac <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe fe22 	bl	8000208 <strlen>
 80015c4:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f8c4 	bl	800175c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3304      	adds	r3, #4
 80015d8:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	18d0      	adds	r0, r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	4619      	mov	r1, r3
 80015e8:	f003 fcbe 	bl	8004f68 <memcpy>
      offset += length_data;
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	4413      	add	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]
      return offset;
 80015f4:	68fb      	ldr	r3, [r7, #12]
    }
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80015fe:	b580      	push	{r7, lr}
 8001600:	b086      	sub	sp, #24
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	441a      	add	r2, r3
 8001612:	f107 030c 	add.w	r3, r7, #12
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f000 f8bd 	bl	8001798 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	3304      	adds	r3, #4
 8001622:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4413      	add	r3, r2
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	429a      	cmp	r2, r3
 8001632:	d20c      	bcs.n	800164e <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	441a      	add	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3b01      	subs	r3, #1
 800163e:	6839      	ldr	r1, [r7, #0]
 8001640:	440b      	add	r3, r1
 8001642:	7812      	ldrb	r2, [r2, #0]
 8001644:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	e7ec      	b.n	8001628 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	3b01      	subs	r3, #1
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	4413      	add	r3, r2
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	3b01      	subs	r3, #1
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	441a      	add	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	605a      	str	r2, [r3, #4]
      offset += length_data;
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4413      	add	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
     return offset;
 8001672:	693b      	ldr	r3, [r7, #16]
    }
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	08005384 	.word	0x08005384

08001698 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	08005394 	.word	0x08005394

080016b4 <USART_RX_Callback>:

char hello[] = "test from STM32!";

//在C中如何调用C++函数：将函数用extern "C"声明
extern "C" void USART_RX_Callback()
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	ringbuffer_putchar(&rb, huart2.Instance->DR);
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <USART_RX_Callback+0x18>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	4619      	mov	r1, r3
 80016c2:	4803      	ldr	r0, [pc, #12]	; (80016d0 <USART_RX_Callback+0x1c>)
 80016c4:	f000 fe25 	bl	8002312 <_Z18ringbuffer_putcharP10ringbufferh>
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200000a4 	.word	0x200000a4
 80016d0:	200005a8 	.word	0x200005a8

080016d4 <_Z5setupv>:

void setup()
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	ringbuffer_init(&rb, RxBuffer, rbuflen);
 80016d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016dc:	490a      	ldr	r1, [pc, #40]	; (8001708 <_Z5setupv+0x34>)
 80016de:	480b      	ldr	r0, [pc, #44]	; (800170c <_Z5setupv+0x38>)
 80016e0:	f000 febd 	bl	800245e <_Z15ringbuffer_initP10ringbufferPhs>
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <_Z5setupv+0x3c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <_Z5setupv+0x3c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0220 	orr.w	r2, r2, #32
 80016f2:	60da      	str	r2, [r3, #12]

	// Initialize ROS
	nh.initNode();
 80016f4:	4807      	ldr	r0, [pc, #28]	; (8001714 <_Z5setupv+0x40>)
 80016f6:	f000 f903 	bl	8001900 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(chatter);
 80016fa:	4907      	ldr	r1, [pc, #28]	; (8001718 <_Z5setupv+0x44>)
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <_Z5setupv+0x40>)
 80016fe:	f000 f91c 	bl	800193a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200001a8 	.word	0x200001a8
 800170c:	200005a8 	.word	0x200005a8
 8001710:	200000a4 	.word	0x200000a4
 8001714:	200005b4 	.word	0x200005b4
 8001718:	20000aec 	.word	0x20000aec

0800171c <_Z4loopv>:

void loop()
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001720:	2120      	movs	r1, #32
 8001722:	4809      	ldr	r0, [pc, #36]	; (8001748 <_Z4loopv+0x2c>)
 8001724:	f001 ff1b 	bl	800355e <HAL_GPIO_TogglePin>
	//HAL_UART_Transmit(&huart2, (uint8_t *)hello, strlen(hello), HAL_MAX_DELAY);

	str_msg.data = hello;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <_Z4loopv+0x30>)
 800172a:	4a09      	ldr	r2, [pc, #36]	; (8001750 <_Z4loopv+0x34>)
 800172c:	605a      	str	r2, [r3, #4]
	chatter.publish(&str_msg);
 800172e:	4907      	ldr	r1, [pc, #28]	; (800174c <_Z4loopv+0x30>)
 8001730:	4808      	ldr	r0, [pc, #32]	; (8001754 <_Z4loopv+0x38>)
 8001732:	f7ff fea2 	bl	800147a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	nh.spinOnce();
 8001736:	4808      	ldr	r0, [pc, #32]	; (8001758 <_Z4loopv+0x3c>)
 8001738:	f000 f92d 	bl	8001996 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

	HAL_Delay(1000);
 800173c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001740:	f001 f8ce 	bl	80028e0 <HAL_Delay>
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40020000 	.word	0x40020000
 800174c:	20000ae4 	.word	0x20000ae4
 8001750:	20000000 	.word	0x20000000
 8001754:	20000aec 	.word	0x20000aec
 8001758:	200005b4 	.word	0x200005b4

0800175c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2b03      	cmp	r3, #3
 800176e:	d80d      	bhi.n	800178c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	fa22 f103 	lsr.w	r1, r2, r3
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	b2ca      	uxtb	r2, r1
 8001782:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	3301      	adds	r3, #1
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	e7ee      	b.n	800176a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d811      	bhi.n	80017d6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6839      	ldr	r1, [r7, #0]
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	440a      	add	r2, r1
 80017bc:	7812      	ldrb	r2, [r2, #0]
 80017be:	4611      	mov	r1, r2
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	00d2      	lsls	r2, r2, #3
 80017c4:	fa01 f202 	lsl.w	r2, r1, r2
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	3301      	adds	r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	e7ea      	b.n	80017ac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "../../ros_lib/std_msgs/Time.h"

namespace ros
{

class NodeHandleBase_
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	0800544c 	.word	0x0800544c

08001804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff ffe8 	bl	80017e4 <_ZN3ros15NodeHandleBase_C1Ev>
 8001814:	4a39      	ldr	r2, [pc, #228]	; (80018fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xf8>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3304      	adds	r3, #4
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fe4b 	bl	80014ba <_ZN13STM32HardwareC1Ev>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff f882 	bl	800093c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2b18      	cmp	r3, #24
 8001840:	d80a      	bhi.n	8001858 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x54>
      publishers[i] = 0;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800184a:	2100      	movs	r1, #0
 800184c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	3301      	adds	r3, #1
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	e7f1      	b.n	800183c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001858:	2300      	movs	r3, #0
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	2b18      	cmp	r3, #24
 8001860:	d80b      	bhi.n	800187a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	2200      	movs	r2, #0
 8001870:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	3301      	adds	r3, #1
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	e7f0      	b.n	800185c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001884:	d209      	bcs.n	800189a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x96>
      message_in[i] = 0;
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4413      	add	r3, r2
 800188c:	3318      	adds	r3, #24
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	3301      	adds	r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	e7f1      	b.n	800187e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018a4:	d20a      	bcs.n	80018bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xb8>
      message_out[i] = 0;
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4413      	add	r3, r2
 80018ac:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	3301      	adds	r3, #1
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	e7f0      	b.n	800189e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    req_param_resp.floats_length = 0;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    req_param_resp.floats = NULL;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    req_param_resp.ints_length = 0;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514

    spin_timeout_ = 0;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	615a      	str	r2, [r3, #20]
  }
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	08005420 	.word	0x08005420

08001900 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3304      	adds	r3, #4
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fddf 	bl	80014d0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800193a:	b480      	push	{r7}
 800193c:	b085      	sub	sp, #20
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b18      	cmp	r3, #24
 800194c:	dc1c      	bgt.n	8001988 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4e>
    {
      if (publishers[i] == 0) // empty slot
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8001956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d110      	bne.n	8001980 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8001966:	6839      	ldr	r1, [r7, #0]
 8001968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	60da      	str	r2, [r3, #12]
        return true;
 800197c:	2301      	movs	r3, #1
 800197e:	e004      	b.n	800198a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3301      	adds	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	e7df      	b.n	8001948 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8001988:	2300      	movs	r3, #0
  }
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3304      	adds	r3, #4
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fdde 	bl	8001564 <_ZN13STM32Hardware4timeEv>
 80019a8:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d903      	bls.n	80019c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d903      	bls.n	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d013      	beq.n	8001a12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3304      	adds	r3, #4
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fdb8 	bl	8001564 <_ZN13STM32Hardware4timeEv>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	1ad2      	subs	r2, r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	bf8c      	ite	hi
 8001a02:	2301      	movhi	r3, #1
 8001a04:	2300      	movls	r3, #0
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 8001a0c:	f06f 0301 	mvn.w	r3, #1
 8001a10:	e190      	b.n	8001d34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      int data = hardware_.read();
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3304      	adds	r3, #4
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fd64 	bl	80014e4 <_ZN13STM32Hardware4readEv>
 8001a1c:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f2c0 8170 	blt.w	8001d06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x370>
      checksum_ += data;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	441a      	add	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8001a3c:	2b07      	cmp	r3, #7
 8001a3e:	d11d      	bne.n	8001a7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8001a46:	1c59      	adds	r1, r3, #1
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	b2d1      	uxtb	r1, r2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	460a      	mov	r2, r1
 8001a58:	761a      	strb	r2, [r3, #24]
        bytes_--;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8001a60:	1e5a      	subs	r2, r3, #1
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1b7      	bne.n	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2208      	movs	r2, #8
 8001a76:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8001a7a:	e7b2      	b.n	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d128      	bne.n	8001ad8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	2bff      	cmp	r3, #255	; 0xff
 8001a8a:	d10d      	bne.n	8001aa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f103 0214 	add.w	r2, r3, #20
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8001aa6:	e79c      	b.n	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3304      	adds	r3, #4
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fd59 	bl	8001564 <_ZN13STM32Hardware4timeEv>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abc:	4293      	cmp	r3, r2
 8001abe:	bf8c      	ite	hi
 8001ac0:	2301      	movhi	r3, #1
 8001ac2:	2300      	movls	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d08b      	beq.n	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 8001ad2:	f06f 0301 	mvn.w	r3, #1
 8001ad6:	e12d      	b.n	8001d34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
      else if (mode_ == MODE_PROTOCOL_VER)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d118      	bne.n	8001b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x17e>
        if (data == PROTOCOL_VER)
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2bfe      	cmp	r3, #254	; 0xfe
 8001ae6:	d107      	bne.n	8001af8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8001af6:	e774      	b.n	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f47f af6b 	bne.w	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f915 	bl	8001d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8001b12:	e766      	b.n	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d113      	bne.n	8001b46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b0>
        bytes_ = data;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8001b34:	1c5a      	adds	r2, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8001b44:	e74d      	b.n	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d110      	bne.n	8001b72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1dc>
        bytes_ += data << 8;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	441a      	add	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8001b70:	e737      	b.n	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d116      	bne.n	8001baa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x214>
        if ((checksum_ % 256) == 255)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8001b82:	425a      	negs	r2, r3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	bf58      	it	pl
 8001b8a:	4253      	negpl	r3, r2
 8001b8c:	2bff      	cmp	r3, #255	; 0xff
 8001b8e:	d107      	bne.n	8001ba0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x20a>
          mode_++;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8001b9e:	e720      	b.n	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8001ba8:	e71b      	b.n	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8001bb0:	2b05      	cmp	r3, #5
 8001bb2:	d10f      	bne.n	8001bd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23e>
        topic_ = data;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 8001bd2:	e706      	b.n	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d117      	bne.n	8001c0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x278>
        topic_ += data << 8;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	441a      	add	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2207      	movs	r2, #7
 8001bf4:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f47f aeef 	bne.w	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2208      	movs	r2, #8
 8001c08:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 8001c0c:	e6e9      	b.n	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	f47f aee4 	bne.w	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8001c28:	425a      	negs	r2, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	bf58      	it	pl
 8001c30:	4253      	negpl	r3, r2
 8001c32:	2bff      	cmp	r3, #255	; 0xff
 8001c34:	f47f aed5 	bne.w	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d110      	bne.n	8001c64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ce>
            requestSyncTime();
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f87a 	bl	8001d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f894 	bl	8001d76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c62:	e067      	b.n	8001d34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39e>
          else if (topic_ == TopicInfo::ID_TIME)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8001c6a:	2b0a      	cmp	r3, #10
 8001c6c:	d106      	bne.n	8001c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e6>
            syncTime(message_in);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3318      	adds	r3, #24
 8001c72:	4619      	mov	r1, r3
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f95f 	bl	8001f38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8001c7a:	e6b2      	b.n	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8001c82:	2b06      	cmp	r3, #6
 8001c84:	d10d      	bne.n	8001ca2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x30c>
            req_param_resp.deserialize(message_in);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3318      	adds	r3, #24
 8001c90:	4619      	mov	r1, r3
 8001c92:	4610      	mov	r0, r2
 8001c94:	f7fe ff87 	bl	8000ba6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 8001ca0:	e69f      	b.n	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8001ca8:	2b0b      	cmp	r3, #11
 8001caa:	d104      	bne.n	8001cb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x320>
            configured_ = false;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 8001cb4:	e695      	b.n	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8001cbc:	3b64      	subs	r3, #100	; 0x64
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f43f ae89 	beq.w	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8001cd6:	3b64      	subs	r3, #100	; 0x64
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	6858      	ldr	r0, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8001cea:	3b64      	subs	r3, #100	; 0x64
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	3218      	adds	r2, #24
 8001d00:	4611      	mov	r1, r2
 8001d02:	4798      	blx	r3
    while (true)
 8001d04:	e66d      	b.n	80019e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8001d06:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00f      	beq.n	8001d32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d906      	bls.n	8001d32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>
      requestSyncTime();
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f809 	bl	8001d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 8001d32:	2300      	movs	r3, #0
  }
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff fa8f 	bl	800126c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f107 020c 	add.w	r2, r7, #12
 8001d58:	210a      	movs	r1, #10
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	4798      	blx	r3
    rt_time = hardware_.time();
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3304      	adds	r3, #4
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fbfe 	bl	8001564 <_ZN13STM32Hardware4timeEv>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
  }
 8001d6e:	bf00      	nop
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8001d76:	b590      	push	{r4, r7, lr}
 8001d78:	b08b      	sub	sp, #44	; 0x2c
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff f89c 	bl	8000ec0 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	2b18      	cmp	r3, #24
 8001d90:	dc5b      	bgt.n	8001e4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d96:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8001d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d04f      	beq.n	8001e42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da6:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8001daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db8:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8001dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc8:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8001dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd0:	6859      	ldr	r1, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd6:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8001dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	3308      	adds	r3, #8
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4608      	mov	r0, r1
 8001de8:	4798      	blx	r3
 8001dea:	4603      	mov	r3, r0
 8001dec:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df2:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8001df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dfa:	6859      	ldr	r1, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e00:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8001e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	330c      	adds	r3, #12
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4608      	mov	r0, r1
 8001e12:	4798      	blx	r3
 8001e14:	4603      	mov	r3, r0
 8001e16:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8001e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e1c:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681c      	ldr	r4, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e28:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8001e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fb36 	bl	80014a2 <_ZN3ros9Publisher15getEndpointTypeEv>
 8001e36:	4601      	mov	r1, r0
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	3301      	adds	r3, #1
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
 8001e48:	e7a0      	b.n	8001d8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	2b18      	cmp	r3, #24
 8001e52:	dc68      	bgt.n	8001f26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d05b      	beq.n	8001f1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	6859      	ldr	r1, [r3, #4]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	3308      	adds	r3, #8
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4608      	mov	r0, r1
 8001eb0:	4798      	blx	r3
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	330c      	adds	r3, #12
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4608      	mov	r0, r1
 8001eda:	4798      	blx	r3
 8001edc:	4603      	mov	r3, r0
 8001ede:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8001ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee4:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681c      	ldr	r4, [r3, #0]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	6859      	ldr	r1, [r3, #4]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4608      	mov	r0, r1
 8001f10:	4798      	blx	r3
 8001f12:	4601      	mov	r1, r0
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	461a      	mov	r2, r3
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	3301      	adds	r3, #1
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
 8001f24:	e793      	b.n	8001e4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 8001f2e:	bf00      	nop
 8001f30:	372c      	adds	r7, #44	; 0x2c
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd90      	pop	{r4, r7, pc}
	...

08001f38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8001f42:	f107 0308 	add.w	r3, r7, #8
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff f990 	bl	800126c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fb07 	bl	8001564 <_ZN13STM32Hardware4timeEv>
 8001f56:	4602      	mov	r2, r0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8001f60:	f107 0308 	add.w	r3, r7, #8
 8001f64:	6839      	ldr	r1, [r7, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff f9f0 	bl	800134c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	4914      	ldr	r1, [pc, #80]	; (8001fc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8001f72:	fba1 1303 	umull	r1, r3, r1, r3
 8001f76:	099b      	lsrs	r3, r3, #6
 8001f78:	4413      	add	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8001f7c:	6939      	ldr	r1, [r7, #16]
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 8001f82:	fba3 0302 	umull	r0, r3, r3, r2
 8001f86:	099b      	lsrs	r3, r3, #6
 8001f88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f8c:	fb00 f303 	mul.w	r3, r0, r3
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	4a0d      	ldr	r2, [pc, #52]	; (8001fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8001f94:	fb02 f303 	mul.w	r3, r2, r3
 8001f98:	440b      	add	r3, r1
 8001f9a:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8001f9c:	f107 0308 	add.w	r3, r7, #8
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f8a5 	bl	80020f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3304      	adds	r3, #4
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fad8 	bl	8001564 <_ZN13STM32Hardware4timeEv>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 8001fbc:	bf00      	nop
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	10624dd3 	.word	0x10624dd3
 8001fc8:	000f4240 	.word	0x000f4240

08001fcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b63      	cmp	r3, #99	; 0x63
 8001fdc:	dd09      	ble.n	8001ff2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001fe4:	f083 0301 	eor.w	r3, r3, #1
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e079      	b.n	80020e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	f502 7206 	add.w	r2, r2, #536	; 0x218
 8001ffe:	3207      	adds	r2, #7
 8002000:	4611      	mov	r1, r2
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	4798      	blx	r3
 8002006:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	22ff      	movs	r2, #255	; 0xff
 800200c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	22fe      	movs	r2, #254	; 0xfe
 8002014:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	b29b      	uxth	r3, r3
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	b29b      	uxth	r3, r3
 800202a:	b2da      	uxtb	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 800203e:	4413      	add	r3, r2
 8002040:	b2db      	uxtb	r3, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	b2da      	uxtb	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	b21b      	sxth	r3, r3
 800205a:	121b      	asrs	r3, r3, #8
 800205c:	b21b      	sxth	r3, r3
 800205e:	b2da      	uxtb	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800206a:	2305      	movs	r3, #5
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	3306      	adds	r3, #6
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	429a      	cmp	r2, r3
 8002076:	dc0d      	bgt.n	8002094 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	4413      	add	r3, r2
 800207e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	4413      	add	r3, r2
 800208a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	3301      	adds	r3, #1
 8002090:	61bb      	str	r3, [r7, #24]
 8002092:	e7ec      	b.n	800206e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	3307      	adds	r3, #7
 8002098:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	425a      	negs	r2, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	bf58      	it	pl
 80020a4:	4253      	negpl	r3, r2
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	1c59      	adds	r1, r3, #1
 80020ac:	6179      	str	r1, [r7, #20]
 80020ae:	43d2      	mvns	r2, r2
 80020b0:	b2d1      	uxtb	r1, r2
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4413      	add	r3, r2
 80020b6:	460a      	mov	r2, r1
 80020b8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020c2:	dc0a      	bgt.n	80020da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1d18      	adds	r0, r3, #4
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4619      	mov	r1, r3
 80020d2:	f7ff fa33 	bl	800153c <_ZN13STM32Hardware5writeEPhi>
      return l;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	e005      	b.n	80020e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80020da:	4905      	ldr	r1, [pc, #20]	; (80020f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 f847 	bl	8002170 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 80020e6:	4618      	mov	r0, r3
 80020e8:	3720      	adds	r7, #32
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	080053b8 	.word	0x080053b8

080020f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3304      	adds	r3, #4
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fa2e 	bl	8001564 <_ZN13STM32Hardware4timeEv>
 8002108:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4914      	ldr	r1, [pc, #80]	; (8002164 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 8002112:	fba1 1303 	umull	r1, r3, r1, r3
 8002116:	099b      	lsrs	r3, r3, #6
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	1e5a      	subs	r2, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 8002128:	fba3 0302 	umull	r0, r3, r3, r2
 800212c:	099b      	lsrs	r3, r3, #6
 800212e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002132:	fb00 f303 	mul.w	r3, r0, r3
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	4a0b      	ldr	r2, [pc, #44]	; (8002168 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	1aca      	subs	r2, r1, r3
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8002142:	4413      	add	r3, r2
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f103 020c 	add.w	r2, r3, #12
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3310      	adds	r3, #16
 8002152:	4619      	mov	r1, r3
 8002154:	4610      	mov	r0, r2
 8002156:	f002 fe95 	bl	8004e84 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	10624dd3 	.word	0x10624dd3
 8002168:	000f4240 	.word	0x000f4240
 800216c:	3b9aca00 	.word	0x3b9aca00

08002170 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	2103      	movs	r1, #3
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f804 	bl	800218c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	460b      	mov	r3, r1
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fb1c 	bl	80007dc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80021a4:	7afb      	ldrb	r3, [r7, #11]
 80021a6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f107 0214 	add.w	r2, r7, #20
 80021b6:	2107      	movs	r1, #7
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	4798      	blx	r3
  }
 80021bc:	bf00      	nop
 80021be:	3720      	adds	r7, #32
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <_Z41__static_initialization_and_destruction_0ii>:
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d110      	bne.n	80021f6 <_Z41__static_initialization_and_destruction_0ii+0x32>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021da:	4293      	cmp	r3, r2
 80021dc:	d10b      	bne.n	80021f6 <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 80021de:	4808      	ldr	r0, [pc, #32]	; (8002200 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80021e0:	f7ff fb10 	bl	8001804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 80021e4:	4807      	ldr	r0, [pc, #28]	; (8002204 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80021e6:	f7ff f9c9 	bl	800157c <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 80021ea:	2300      	movs	r3, #0
 80021ec:	4a05      	ldr	r2, [pc, #20]	; (8002204 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80021ee:	4906      	ldr	r1, [pc, #24]	; (8002208 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80021f0:	4806      	ldr	r0, [pc, #24]	; (800220c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80021f2:	f7ff f92b 	bl	800144c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200005b4 	.word	0x200005b4
 8002204:	20000ae4 	.word	0x20000ae4
 8002208:	080053f4 	.word	0x080053f4
 800220c:	20000aec 	.word	0x20000aec

08002210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
    return configured_;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <_GLOBAL__sub_I_RxBuffer>:
 800222a:	b580      	push	{r7, lr}
 800222c:	af00      	add	r7, sp, #0
 800222e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002232:	2001      	movs	r0, #1
 8002234:	f7ff ffc6 	bl	80021c4 <_Z41__static_initialization_and_destruction_0ii>
 8002238:	bd80      	pop	{r7, pc}

0800223a <_Z17ringbuffer_statusP10ringbuffer>:
#include <string.h>

#define ASSERT(EX)                                                         \

__inline enum ringbuffer_state  ringbuffer_status(struct  ringbuffer *rb)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
	if (rb->read_index == rb->write_index) {
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	889b      	ldrh	r3, [r3, #4]
 8002246:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800224a:	b29a      	uxth	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	88db      	ldrh	r3, [r3, #6]
 8002250:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8002254:	b29b      	uxth	r3, r3
 8002256:	429a      	cmp	r2, r3
 8002258:	d10f      	bne.n	800227a <_Z17ringbuffer_statusP10ringbuffer+0x40>
		if (rb->read_mirror == rb->write_mirror)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	791b      	ldrb	r3, [r3, #4]
 800225e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002262:	b2da      	uxtb	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	799b      	ldrb	r3, [r3, #6]
 8002268:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	429a      	cmp	r2, r3
 8002270:	d101      	bne.n	8002276 <_Z17ringbuffer_statusP10ringbuffer+0x3c>
			return RT_RINGBUFFER_EMPTY;
 8002272:	2300      	movs	r3, #0
 8002274:	e002      	b.n	800227c <_Z17ringbuffer_statusP10ringbuffer+0x42>
		else
			return RT_RINGBUFFER_FULL;
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <_Z17ringbuffer_statusP10ringbuffer+0x42>
	}
	return RT_RINGBUFFER_HALFFULL;
 800227a:	2302      	movs	r3, #2
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <_Z19ringbuffer_data_lenP10ringbuffer>:

/** return the size of data in rb */
uint16_t  ringbuffer_data_len(struct  ringbuffer *rb)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	switch ( ringbuffer_status(rb)) {
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ffd2 	bl	800223a <_Z17ringbuffer_statusP10ringbuffer>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <_Z19ringbuffer_data_lenP10ringbuffer+0x1a>
 800229c:	2b01      	cmp	r3, #1
 800229e:	d002      	beq.n	80022a6 <_Z19ringbuffer_data_lenP10ringbuffer+0x1e>
 80022a0:	e006      	b.n	80022b0 <_Z19ringbuffer_data_lenP10ringbuffer+0x28>
	case RT_RINGBUFFER_EMPTY:
		return 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	e031      	b.n	800230a <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
	case RT_RINGBUFFER_FULL:
		return rb->buffer_size;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	e02c      	b.n	800230a <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
	case RT_RINGBUFFER_HALFFULL:
	default:
		if (rb->write_index > rb->read_index)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	88db      	ldrh	r3, [r3, #6]
 80022b4:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	889b      	ldrh	r3, [r3, #4]
 80022be:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d90d      	bls.n	80022e4 <_Z19ringbuffer_data_lenP10ringbuffer+0x5c>
			return rb->write_index - rb->read_index;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	88db      	ldrh	r3, [r3, #6]
 80022cc:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	889b      	ldrh	r3, [r3, #4]
 80022d8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80022dc:	b29b      	uxth	r3, r3
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	e012      	b.n	800230a <_Z19ringbuffer_data_lenP10ringbuffer+0x82>
		else
			return rb->buffer_size - (rb->read_index - rb->write_index);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	88db      	ldrh	r3, [r3, #6]
 80022f0:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	4619      	mov	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	889b      	ldrh	r3, [r3, #4]
 80022fc:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8002300:	b29b      	uxth	r3, r3
 8002302:	1acb      	subs	r3, r1, r3
 8002304:	b29b      	uxth	r3, r3
 8002306:	4413      	add	r3, r2
 8002308:	b29b      	uxth	r3, r3
	};
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <_Z18ringbuffer_putcharP10ringbufferh>:

/**
 * put a character into ring buffer
 */
uint32_t  ringbuffer_putchar(struct  ringbuffer *rb, const uint8_t ch)
{
 8002312:	b590      	push	{r4, r7, lr}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	460b      	mov	r3, r1
 800231c:	70fb      	strb	r3, [r7, #3]
    ASSERT(rb != NULL);

    /* whether has enough space */
	if (! ringbuffer_empty_space(rb))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002324:	461c      	mov	r4, r3
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ffae 	bl	8002288 <_Z19ringbuffer_data_lenP10ringbuffer>
 800232c:	4603      	mov	r3, r0
 800232e:	429c      	cmp	r4, r3
 8002330:	bf0c      	ite	eq
 8002332:	2301      	moveq	r3, #1
 8002334:	2300      	movne	r3, #0
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <_Z18ringbuffer_putcharP10ringbufferh+0x2e>
		return 0;
 800233c:	2300      	movs	r3, #0
 800233e:	e039      	b.n	80023b4 <_Z18ringbuffer_putcharP10ringbufferh+0xa2>

	rb->buffer_ptr[rb->write_index] = ch;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	88d2      	ldrh	r2, [r2, #6]
 8002348:	f3c2 024e 	ubfx	r2, r2, #1, #15
 800234c:	b292      	uxth	r2, r2
 800234e:	4413      	add	r3, r2
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	701a      	strb	r2, [r3, #0]

	/* flip mirror */
	if (rb->write_index == rb->buffer_size - 1) {
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	88db      	ldrh	r3, [r3, #6]
 8002358:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800235c:	b29b      	uxth	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002366:	3b01      	subs	r3, #1
 8002368:	429a      	cmp	r2, r3
 800236a:	d114      	bne.n	8002396 <_Z18ringbuffer_putcharP10ringbufferh+0x84>
		rb->write_mirror = ~rb->write_mirror;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	799b      	ldrb	r3, [r3, #6]
 8002370:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002374:	b2db      	uxtb	r3, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	b2d9      	uxtb	r1, r3
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	7993      	ldrb	r3, [r2, #6]
 8002384:	f361 0300 	bfi	r3, r1, #0, #1
 8002388:	7193      	strb	r3, [r2, #6]
		rb->write_index = 0;
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	88d3      	ldrh	r3, [r2, #6]
 800238e:	f36f 034f 	bfc	r3, #1, #15
 8002392:	80d3      	strh	r3, [r2, #6]
 8002394:	e00d      	b.n	80023b2 <_Z18ringbuffer_putcharP10ringbufferh+0xa0>
	} else {
		rb->write_index++;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	88db      	ldrh	r3, [r3, #6]
 800239a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800239e:	b29b      	uxth	r3, r3
 80023a0:	3301      	adds	r3, #1
 80023a2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80023a6:	b299      	uxth	r1, r3
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	88d3      	ldrh	r3, [r2, #6]
 80023ac:	f361 034f 	bfi	r3, r1, #1, #15
 80023b0:	80d3      	strh	r3, [r2, #6]
	}

	return 1;
 80023b2:	2301      	movs	r3, #1
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd90      	pop	{r4, r7, pc}

080023bc <_Z18ringbuffer_getcharP10ringbufferPh>:

/**
 * get a character from a ringbuffer
 */
uint32_t  ringbuffer_getchar(struct  ringbuffer *rb, uint8_t *ch)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
    ASSERT(rb != NULL);

    /* ringbuffer is empty */
    if (! ringbuffer_data_len(rb))
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ff5e 	bl	8002288 <_Z19ringbuffer_data_lenP10ringbuffer>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	bf0c      	ite	eq
 80023d2:	2301      	moveq	r3, #1
 80023d4:	2300      	movne	r3, #0
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <_Z18ringbuffer_getcharP10ringbufferPh+0x24>
        return 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	e03a      	b.n	8002456 <_Z18ringbuffer_getcharP10ringbufferPh+0x9a>

    /* put character */
    *ch = rb->buffer_ptr[rb->read_index];
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	8892      	ldrh	r2, [r2, #4]
 80023e8:	f3c2 024e 	ubfx	r2, r2, #1, #15
 80023ec:	b292      	uxth	r2, r2
 80023ee:	4413      	add	r3, r2
 80023f0:	781a      	ldrb	r2, [r3, #0]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	701a      	strb	r2, [r3, #0]

    if (rb->read_index == rb->buffer_size-1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	889b      	ldrh	r3, [r3, #4]
 80023fa:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80023fe:	b29b      	uxth	r3, r3
 8002400:	461a      	mov	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002408:	3b01      	subs	r3, #1
 800240a:	429a      	cmp	r2, r3
 800240c:	d114      	bne.n	8002438 <_Z18ringbuffer_getcharP10ringbufferPh+0x7c>
    {
        rb->read_mirror = ~rb->read_mirror;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	791b      	ldrb	r3, [r3, #4]
 8002412:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002416:	b2db      	uxtb	r3, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	b2d9      	uxtb	r1, r3
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	7913      	ldrb	r3, [r2, #4]
 8002426:	f361 0300 	bfi	r3, r1, #0, #1
 800242a:	7113      	strb	r3, [r2, #4]
        rb->read_index = 0;
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	8893      	ldrh	r3, [r2, #4]
 8002430:	f36f 034f 	bfc	r3, #1, #15
 8002434:	8093      	strh	r3, [r2, #4]
 8002436:	e00d      	b.n	8002454 <_Z18ringbuffer_getcharP10ringbufferPh+0x98>
    }
    else
    {
        rb->read_index++;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	889b      	ldrh	r3, [r3, #4]
 800243c:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8002440:	b29b      	uxth	r3, r3
 8002442:	3301      	adds	r3, #1
 8002444:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002448:	b299      	uxth	r1, r3
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	8893      	ldrh	r3, [r2, #4]
 800244e:	f361 034f 	bfi	r3, r1, #1, #15
 8002452:	8093      	strh	r3, [r2, #4]
    }

    return 1;
 8002454:	2301      	movs	r3, #1
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <_Z15ringbuffer_initP10ringbufferPhs>:
}

void  ringbuffer_init(struct  ringbuffer *rb,
                        uint8_t           *pool,
                        int16_t            size)
{
 800245e:	b480      	push	{r7}
 8002460:	b085      	sub	sp, #20
 8002462:	af00      	add	r7, sp, #0
 8002464:	60f8      	str	r0, [r7, #12]
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	4613      	mov	r3, r2
 800246a:	80fb      	strh	r3, [r7, #6]
    ASSERT(rb != NULL);
    ASSERT(size > 0);

    /* initialize read and write index */
    rb->read_mirror = rb->read_index = 0;
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	8893      	ldrh	r3, [r2, #4]
 8002470:	f36f 034f 	bfc	r3, #1, #15
 8002474:	8093      	strh	r3, [r2, #4]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	889b      	ldrh	r3, [r3, #4]
 800247a:	f3c3 034e 	ubfx	r3, r3, #1, #15
 800247e:	b29b      	uxth	r3, r3
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	b2d9      	uxtb	r1, r3
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	7913      	ldrb	r3, [r2, #4]
 800248a:	f361 0300 	bfi	r3, r1, #0, #1
 800248e:	7113      	strb	r3, [r2, #4]
    rb->write_mirror = rb->write_index = 0;
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	88d3      	ldrh	r3, [r2, #6]
 8002494:	f36f 034f 	bfc	r3, #1, #15
 8002498:	80d3      	strh	r3, [r2, #6]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	88db      	ldrh	r3, [r3, #6]
 800249e:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	b2d9      	uxtb	r1, r3
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	7993      	ldrb	r3, [r2, #6]
 80024ae:	f361 0300 	bfi	r3, r1, #0, #1
 80024b2:	7193      	strb	r3, [r2, #6]

    /* set buffer pool and size */
    rb->buffer_ptr = pool;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	601a      	str	r2, [r3, #0]
    rb->buffer_size = size; //ALIGN_DOWN(size, ALIGN_SIZE);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	88fa      	ldrh	r2, [r7, #6]
 80024be:	811a      	strh	r2, [r3, #8]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	607b      	str	r3, [r7, #4]
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <HAL_MspInit+0x4c>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	4a0f      	ldr	r2, [pc, #60]	; (8002518 <HAL_MspInit+0x4c>)
 80024dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e0:	6453      	str	r3, [r2, #68]	; 0x44
 80024e2:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <HAL_MspInit+0x4c>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ea:	607b      	str	r3, [r7, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_MspInit+0x4c>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	4a08      	ldr	r2, [pc, #32]	; (8002518 <HAL_MspInit+0x4c>)
 80024f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6413      	str	r3, [r2, #64]	; 0x40
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_MspInit+0x4c>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800250a:	2007      	movs	r0, #7
 800250c:	f000 fadc 	bl	8002ac8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40023800 	.word	0x40023800

0800251c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08a      	sub	sp, #40	; 0x28
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002524:	f107 0314 	add.w	r3, r7, #20
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a4c      	ldr	r2, [pc, #304]	; (800266c <HAL_UART_MspInit+0x150>)
 800253a:	4293      	cmp	r3, r2
 800253c:	f040 8092 	bne.w	8002664 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002540:	2300      	movs	r3, #0
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	4b4a      	ldr	r3, [pc, #296]	; (8002670 <HAL_UART_MspInit+0x154>)
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	4a49      	ldr	r2, [pc, #292]	; (8002670 <HAL_UART_MspInit+0x154>)
 800254a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800254e:	6413      	str	r3, [r2, #64]	; 0x40
 8002550:	4b47      	ldr	r3, [pc, #284]	; (8002670 <HAL_UART_MspInit+0x154>)
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	4b43      	ldr	r3, [pc, #268]	; (8002670 <HAL_UART_MspInit+0x154>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	4a42      	ldr	r2, [pc, #264]	; (8002670 <HAL_UART_MspInit+0x154>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	6313      	str	r3, [r2, #48]	; 0x30
 800256c:	4b40      	ldr	r3, [pc, #256]	; (8002670 <HAL_UART_MspInit+0x154>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002578:	230c      	movs	r3, #12
 800257a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257c:	2302      	movs	r3, #2
 800257e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002584:	2303      	movs	r3, #3
 8002586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002588:	2307      	movs	r3, #7
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	4619      	mov	r1, r3
 8002592:	4838      	ldr	r0, [pc, #224]	; (8002674 <HAL_UART_MspInit+0x158>)
 8002594:	f000 fe56 	bl	8003244 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002598:	4b37      	ldr	r3, [pc, #220]	; (8002678 <HAL_UART_MspInit+0x15c>)
 800259a:	4a38      	ldr	r2, [pc, #224]	; (800267c <HAL_UART_MspInit+0x160>)
 800259c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800259e:	4b36      	ldr	r3, [pc, #216]	; (8002678 <HAL_UART_MspInit+0x15c>)
 80025a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025a6:	4b34      	ldr	r3, [pc, #208]	; (8002678 <HAL_UART_MspInit+0x15c>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ac:	4b32      	ldr	r3, [pc, #200]	; (8002678 <HAL_UART_MspInit+0x15c>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025b2:	4b31      	ldr	r3, [pc, #196]	; (8002678 <HAL_UART_MspInit+0x15c>)
 80025b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025ba:	4b2f      	ldr	r3, [pc, #188]	; (8002678 <HAL_UART_MspInit+0x15c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025c0:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_UART_MspInit+0x15c>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80025c6:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <HAL_UART_MspInit+0x15c>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80025cc:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <HAL_UART_MspInit+0x15c>)
 80025ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025d2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025d4:	4b28      	ldr	r3, [pc, #160]	; (8002678 <HAL_UART_MspInit+0x15c>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80025da:	4827      	ldr	r0, [pc, #156]	; (8002678 <HAL_UART_MspInit+0x15c>)
 80025dc:	f000 fab6 	bl	8002b4c <HAL_DMA_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80025e6:	f7fe f8e3 	bl	80007b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a22      	ldr	r2, [pc, #136]	; (8002678 <HAL_UART_MspInit+0x15c>)
 80025ee:	639a      	str	r2, [r3, #56]	; 0x38
 80025f0:	4a21      	ldr	r2, [pc, #132]	; (8002678 <HAL_UART_MspInit+0x15c>)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80025f6:	4b22      	ldr	r3, [pc, #136]	; (8002680 <HAL_UART_MspInit+0x164>)
 80025f8:	4a22      	ldr	r2, [pc, #136]	; (8002684 <HAL_UART_MspInit+0x168>)
 80025fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80025fc:	4b20      	ldr	r3, [pc, #128]	; (8002680 <HAL_UART_MspInit+0x164>)
 80025fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002602:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002604:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <HAL_UART_MspInit+0x164>)
 8002606:	2240      	movs	r2, #64	; 0x40
 8002608:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800260a:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <HAL_UART_MspInit+0x164>)
 800260c:	2200      	movs	r2, #0
 800260e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_UART_MspInit+0x164>)
 8002612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002616:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_UART_MspInit+0x164>)
 800261a:	2200      	movs	r2, #0
 800261c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800261e:	4b18      	ldr	r3, [pc, #96]	; (8002680 <HAL_UART_MspInit+0x164>)
 8002620:	2200      	movs	r2, #0
 8002622:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002624:	4b16      	ldr	r3, [pc, #88]	; (8002680 <HAL_UART_MspInit+0x164>)
 8002626:	2200      	movs	r2, #0
 8002628:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <HAL_UART_MspInit+0x164>)
 800262c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002630:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002632:	4b13      	ldr	r3, [pc, #76]	; (8002680 <HAL_UART_MspInit+0x164>)
 8002634:	2200      	movs	r2, #0
 8002636:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002638:	4811      	ldr	r0, [pc, #68]	; (8002680 <HAL_UART_MspInit+0x164>)
 800263a:	f000 fa87 	bl	8002b4c <HAL_DMA_Init>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8002644:	f7fe f8b4 	bl	80007b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a0d      	ldr	r2, [pc, #52]	; (8002680 <HAL_UART_MspInit+0x164>)
 800264c:	635a      	str	r2, [r3, #52]	; 0x34
 800264e:	4a0c      	ldr	r2, [pc, #48]	; (8002680 <HAL_UART_MspInit+0x164>)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002654:	2200      	movs	r2, #0
 8002656:	2100      	movs	r1, #0
 8002658:	2026      	movs	r0, #38	; 0x26
 800265a:	f000 fa40 	bl	8002ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800265e:	2026      	movs	r0, #38	; 0x26
 8002660:	f000 fa59 	bl	8002b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002664:	bf00      	nop
 8002666:	3728      	adds	r7, #40	; 0x28
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40004400 	.word	0x40004400
 8002670:	40023800 	.word	0x40023800
 8002674:	40020000 	.word	0x40020000
 8002678:	200000e8 	.word	0x200000e8
 800267c:	40026088 	.word	0x40026088
 8002680:	20000148 	.word	0x20000148
 8002684:	400260a0 	.word	0x400260a0

08002688 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800268c:	f000 f908 	bl	80028a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}

08002694 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002698:	4802      	ldr	r0, [pc, #8]	; (80026a4 <DMA1_Stream5_IRQHandler+0x10>)
 800269a:	f000 fb97 	bl	8002dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	200000e8 	.word	0x200000e8

080026a8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80026ac:	4802      	ldr	r0, [pc, #8]	; (80026b8 <DMA1_Stream6_IRQHandler+0x10>)
 80026ae:	f000 fb8d 	bl	8002dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000148 	.word	0x20000148

080026bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

USART_RX_Callback();
 80026c0:	f7fe fff8 	bl	80016b4 <USART_RX_Callback>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026c4:	4802      	ldr	r0, [pc, #8]	; (80026d0 <USART2_IRQHandler+0x14>)
 80026c6:	f001 fca9 	bl	800401c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	200000a4 	.word	0x200000a4

080026d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
	return 1;
 80026d8:	2301      	movs	r3, #1
}
 80026da:	4618      	mov	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <_kill>:

int _kill(int pid, int sig)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026ee:	f002 fc11 	bl	8004f14 <__errno>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2216      	movs	r2, #22
 80026f6:	601a      	str	r2, [r3, #0]
	return -1;
 80026f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <_exit>:

void _exit (int status)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800270c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ffe7 	bl	80026e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002716:	e7fe      	b.n	8002716 <_exit+0x12>

08002718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002720:	4a14      	ldr	r2, [pc, #80]	; (8002774 <_sbrk+0x5c>)
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <_sbrk+0x60>)
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800272c:	4b13      	ldr	r3, [pc, #76]	; (800277c <_sbrk+0x64>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <_sbrk+0x64>)
 8002736:	4a12      	ldr	r2, [pc, #72]	; (8002780 <_sbrk+0x68>)
 8002738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <_sbrk+0x64>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	429a      	cmp	r2, r3
 8002746:	d207      	bcs.n	8002758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002748:	f002 fbe4 	bl	8004f14 <__errno>
 800274c:	4603      	mov	r3, r0
 800274e:	220c      	movs	r2, #12
 8002750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002756:	e009      	b.n	800276c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002758:	4b08      	ldr	r3, [pc, #32]	; (800277c <_sbrk+0x64>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800275e:	4b07      	ldr	r3, [pc, #28]	; (800277c <_sbrk+0x64>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	4a05      	ldr	r2, [pc, #20]	; (800277c <_sbrk+0x64>)
 8002768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800276a:	68fb      	ldr	r3, [r7, #12]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20008000 	.word	0x20008000
 8002778:	00000400 	.word	0x00000400
 800277c:	20000b00 	.word	0x20000b00
 8002780:	20000b18 	.word	0x20000b18

08002784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <SystemInit+0x20>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278e:	4a05      	ldr	r2, [pc, #20]	; (80027a4 <SystemInit+0x20>)
 8002790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80027a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027ac:	480d      	ldr	r0, [pc, #52]	; (80027e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027ae:	490e      	ldr	r1, [pc, #56]	; (80027e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027b0:	4a0e      	ldr	r2, [pc, #56]	; (80027ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b4:	e002      	b.n	80027bc <LoopCopyDataInit>

080027b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ba:	3304      	adds	r3, #4

080027bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c0:	d3f9      	bcc.n	80027b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027c2:	4a0b      	ldr	r2, [pc, #44]	; (80027f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027c4:	4c0b      	ldr	r4, [pc, #44]	; (80027f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027c8:	e001      	b.n	80027ce <LoopFillZerobss>

080027ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027cc:	3204      	adds	r2, #4

080027ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d0:	d3fb      	bcc.n	80027ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027d2:	f7ff ffd7 	bl	8002784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027d6:	f002 fba3 	bl	8004f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027da:	f7fd fe9f 	bl	800051c <main>
  bx  lr    
 80027de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80027e0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80027e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80027ec:	08005504 	.word	0x08005504
  ldr r2, =_sbss
 80027f0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80027f4:	20000b18 	.word	0x20000b18

080027f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027f8:	e7fe      	b.n	80027f8 <ADC_IRQHandler>
	...

080027fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002800:	4b0e      	ldr	r3, [pc, #56]	; (800283c <HAL_Init+0x40>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0d      	ldr	r2, [pc, #52]	; (800283c <HAL_Init+0x40>)
 8002806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800280a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_Init+0x40>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0a      	ldr	r2, [pc, #40]	; (800283c <HAL_Init+0x40>)
 8002812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <HAL_Init+0x40>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a07      	ldr	r2, [pc, #28]	; (800283c <HAL_Init+0x40>)
 800281e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002824:	2003      	movs	r0, #3
 8002826:	f000 f94f 	bl	8002ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800282a:	2000      	movs	r0, #0
 800282c:	f000 f808 	bl	8002840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002830:	f7ff fe4c 	bl	80024cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40023c00 	.word	0x40023c00

08002840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_InitTick+0x54>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_InitTick+0x58>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	4619      	mov	r1, r3
 8002852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002856:	fbb3 f3f1 	udiv	r3, r3, r1
 800285a:	fbb2 f3f3 	udiv	r3, r2, r3
 800285e:	4618      	mov	r0, r3
 8002860:	f000 f967 	bl	8002b32 <HAL_SYSTICK_Config>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e00e      	b.n	800288c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b0f      	cmp	r3, #15
 8002872:	d80a      	bhi.n	800288a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002874:	2200      	movs	r2, #0
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800287c:	f000 f92f 	bl	8002ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002880:	4a06      	ldr	r2, [pc, #24]	; (800289c <HAL_InitTick+0x5c>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000014 	.word	0x20000014
 8002898:	2000001c 	.word	0x2000001c
 800289c:	20000018 	.word	0x20000018

080028a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_IncTick+0x20>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_IncTick+0x24>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <HAL_IncTick+0x24>)
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	2000001c 	.word	0x2000001c
 80028c4:	20000b04 	.word	0x20000b04

080028c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return uwTick;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <HAL_GetTick+0x14>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000b04 	.word	0x20000b04

080028e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e8:	f7ff ffee 	bl	80028c8 <HAL_GetTick>
 80028ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028f8:	d005      	beq.n	8002906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <HAL_Delay+0x44>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4413      	add	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002906:	bf00      	nop
 8002908:	f7ff ffde 	bl	80028c8 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	429a      	cmp	r2, r3
 8002916:	d8f7      	bhi.n	8002908 <HAL_Delay+0x28>
  {
  }
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	2000001c 	.word	0x2000001c

08002928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <__NVIC_SetPriorityGrouping+0x44>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002944:	4013      	ands	r3, r2
 8002946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800295a:	4a04      	ldr	r2, [pc, #16]	; (800296c <__NVIC_SetPriorityGrouping+0x44>)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	60d3      	str	r3, [r2, #12]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002974:	4b04      	ldr	r3, [pc, #16]	; (8002988 <__NVIC_GetPriorityGrouping+0x18>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	0a1b      	lsrs	r3, r3, #8
 800297a:	f003 0307 	and.w	r3, r3, #7
}
 800297e:	4618      	mov	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	2b00      	cmp	r3, #0
 800299c:	db0b      	blt.n	80029b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	f003 021f 	and.w	r2, r3, #31
 80029a4:	4907      	ldr	r1, [pc, #28]	; (80029c4 <__NVIC_EnableIRQ+0x38>)
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	2001      	movs	r0, #1
 80029ae:	fa00 f202 	lsl.w	r2, r0, r2
 80029b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	e000e100 	.word	0xe000e100

080029c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	6039      	str	r1, [r7, #0]
 80029d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	db0a      	blt.n	80029f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	490c      	ldr	r1, [pc, #48]	; (8002a14 <__NVIC_SetPriority+0x4c>)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	0112      	lsls	r2, r2, #4
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	440b      	add	r3, r1
 80029ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f0:	e00a      	b.n	8002a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	4908      	ldr	r1, [pc, #32]	; (8002a18 <__NVIC_SetPriority+0x50>)
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	3b04      	subs	r3, #4
 8002a00:	0112      	lsls	r2, r2, #4
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	440b      	add	r3, r1
 8002a06:	761a      	strb	r2, [r3, #24]
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000e100 	.word	0xe000e100
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b089      	sub	sp, #36	; 0x24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f1c3 0307 	rsb	r3, r3, #7
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	bf28      	it	cs
 8002a3a:	2304      	movcs	r3, #4
 8002a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3304      	adds	r3, #4
 8002a42:	2b06      	cmp	r3, #6
 8002a44:	d902      	bls.n	8002a4c <NVIC_EncodePriority+0x30>
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3b03      	subs	r3, #3
 8002a4a:	e000      	b.n	8002a4e <NVIC_EncodePriority+0x32>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	401a      	ands	r2, r3
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6e:	43d9      	mvns	r1, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a74:	4313      	orrs	r3, r2
         );
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3724      	adds	r7, #36	; 0x24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a94:	d301      	bcc.n	8002a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a96:	2301      	movs	r3, #1
 8002a98:	e00f      	b.n	8002aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a9a:	4a0a      	ldr	r2, [pc, #40]	; (8002ac4 <SysTick_Config+0x40>)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aa2:	210f      	movs	r1, #15
 8002aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002aa8:	f7ff ff8e 	bl	80029c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <SysTick_Config+0x40>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ab2:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <SysTick_Config+0x40>)
 8002ab4:	2207      	movs	r2, #7
 8002ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	e000e010 	.word	0xe000e010

08002ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff ff29 	bl	8002928 <__NVIC_SetPriorityGrouping>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b086      	sub	sp, #24
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002af0:	f7ff ff3e 	bl	8002970 <__NVIC_GetPriorityGrouping>
 8002af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	6978      	ldr	r0, [r7, #20]
 8002afc:	f7ff ff8e 	bl	8002a1c <NVIC_EncodePriority>
 8002b00:	4602      	mov	r2, r0
 8002b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b06:	4611      	mov	r1, r2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff5d 	bl	80029c8 <__NVIC_SetPriority>
}
 8002b0e:	bf00      	nop
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff31 	bl	800298c <__NVIC_EnableIRQ>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff ffa2 	bl	8002a84 <SysTick_Config>
 8002b40:	4603      	mov	r3, r0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b58:	f7ff feb6 	bl	80028c8 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e099      	b.n	8002c9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b88:	e00f      	b.n	8002baa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b8a:	f7ff fe9d 	bl	80028c8 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b05      	cmp	r3, #5
 8002b96:	d908      	bls.n	8002baa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e078      	b.n	8002c9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e8      	bne.n	8002b8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	4b38      	ldr	r3, [pc, #224]	; (8002ca4 <HAL_DMA_Init+0x158>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d107      	bne.n	8002c14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f023 0307 	bic.w	r3, r3, #7
 8002c2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d117      	bne.n	8002c6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00e      	beq.n	8002c6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 fa7b 	bl	800314c <DMA_CheckFifoParam>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2240      	movs	r2, #64	; 0x40
 8002c60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e016      	b.n	8002c9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fa32 	bl	80030e0 <DMA_CalcBaseAndBitshift>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	223f      	movs	r2, #63	; 0x3f
 8002c86:	409a      	lsls	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	f010803f 	.word	0xf010803f

08002ca8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cb6:	f7ff fe07 	bl	80028c8 <HAL_GetTick>
 8002cba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d008      	beq.n	8002cda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2280      	movs	r2, #128	; 0x80
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e052      	b.n	8002d80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0216 	bic.w	r2, r2, #22
 8002ce8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cf8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d103      	bne.n	8002d0a <HAL_DMA_Abort+0x62>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0208 	bic.w	r2, r2, #8
 8002d18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0201 	bic.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d2a:	e013      	b.n	8002d54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d2c:	f7ff fdcc 	bl	80028c8 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b05      	cmp	r3, #5
 8002d38:	d90c      	bls.n	8002d54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2203      	movs	r2, #3
 8002d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e015      	b.n	8002d80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1e4      	bne.n	8002d2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d66:	223f      	movs	r2, #63	; 0x3f
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d004      	beq.n	8002da6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2280      	movs	r2, #128	; 0x80
 8002da0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e00c      	b.n	8002dc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2205      	movs	r2, #5
 8002daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0201 	bic.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002dd8:	4b8e      	ldr	r3, [pc, #568]	; (8003014 <HAL_DMA_IRQHandler+0x248>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a8e      	ldr	r2, [pc, #568]	; (8003018 <HAL_DMA_IRQHandler+0x24c>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	0a9b      	lsrs	r3, r3, #10
 8002de4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df6:	2208      	movs	r2, #8
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d01a      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d013      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0204 	bic.w	r2, r2, #4
 8002e1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e24:	2208      	movs	r2, #8
 8002e26:	409a      	lsls	r2, r3
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e30:	f043 0201 	orr.w	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	409a      	lsls	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d012      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00b      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e66:	f043 0202 	orr.w	r2, r3, #2
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e72:	2204      	movs	r2, #4
 8002e74:	409a      	lsls	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d012      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00b      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	2204      	movs	r2, #4
 8002e92:	409a      	lsls	r2, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9c:	f043 0204 	orr.w	r2, r3, #4
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea8:	2210      	movs	r2, #16
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d043      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d03c      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d018      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d108      	bne.n	8002efc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d024      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	4798      	blx	r3
 8002efa:	e01f      	b.n	8002f3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01b      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	4798      	blx	r3
 8002f0c:	e016      	b.n	8002f3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d107      	bne.n	8002f2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0208 	bic.w	r2, r2, #8
 8002f2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f40:	2220      	movs	r2, #32
 8002f42:	409a      	lsls	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 808f 	beq.w	800306c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 8087 	beq.w	800306c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f62:	2220      	movs	r2, #32
 8002f64:	409a      	lsls	r2, r3
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b05      	cmp	r3, #5
 8002f74:	d136      	bne.n	8002fe4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0216 	bic.w	r2, r2, #22
 8002f84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d103      	bne.n	8002fa6 <HAL_DMA_IRQHandler+0x1da>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0208 	bic.w	r2, r2, #8
 8002fb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fba:	223f      	movs	r2, #63	; 0x3f
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d07e      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	4798      	blx	r3
        }
        return;
 8002fe2:	e079      	b.n	80030d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d01d      	beq.n	800302e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10d      	bne.n	800301c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	2b00      	cmp	r3, #0
 8003006:	d031      	beq.n	800306c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	4798      	blx	r3
 8003010:	e02c      	b.n	800306c <HAL_DMA_IRQHandler+0x2a0>
 8003012:	bf00      	nop
 8003014:	20000014 	.word	0x20000014
 8003018:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d023      	beq.n	800306c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	4798      	blx	r3
 800302c:	e01e      	b.n	800306c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10f      	bne.n	800305c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0210 	bic.w	r2, r2, #16
 800304a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003070:	2b00      	cmp	r3, #0
 8003072:	d032      	beq.n	80030da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d022      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2205      	movs	r2, #5
 8003084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0201 	bic.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	3301      	adds	r3, #1
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d307      	bcc.n	80030b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f2      	bne.n	8003098 <HAL_DMA_IRQHandler+0x2cc>
 80030b2:	e000      	b.n	80030b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
 80030d6:	e000      	b.n	80030da <HAL_DMA_IRQHandler+0x30e>
        return;
 80030d8:	bf00      	nop
    }
  }
}
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	3b10      	subs	r3, #16
 80030f0:	4a14      	ldr	r2, [pc, #80]	; (8003144 <DMA_CalcBaseAndBitshift+0x64>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	091b      	lsrs	r3, r3, #4
 80030f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030fa:	4a13      	ldr	r2, [pc, #76]	; (8003148 <DMA_CalcBaseAndBitshift+0x68>)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4413      	add	r3, r2
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b03      	cmp	r3, #3
 800310c:	d909      	bls.n	8003122 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003116:	f023 0303 	bic.w	r3, r3, #3
 800311a:	1d1a      	adds	r2, r3, #4
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	659a      	str	r2, [r3, #88]	; 0x58
 8003120:	e007      	b.n	8003132 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800312a:	f023 0303 	bic.w	r3, r3, #3
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	aaaaaaab 	.word	0xaaaaaaab
 8003148:	080054e8 	.word	0x080054e8

0800314c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d11f      	bne.n	80031a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b03      	cmp	r3, #3
 800316a:	d856      	bhi.n	800321a <DMA_CheckFifoParam+0xce>
 800316c:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <DMA_CheckFifoParam+0x28>)
 800316e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003172:	bf00      	nop
 8003174:	08003185 	.word	0x08003185
 8003178:	08003197 	.word	0x08003197
 800317c:	08003185 	.word	0x08003185
 8003180:	0800321b 	.word	0x0800321b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d046      	beq.n	800321e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003194:	e043      	b.n	800321e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800319e:	d140      	bne.n	8003222 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031a4:	e03d      	b.n	8003222 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ae:	d121      	bne.n	80031f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d837      	bhi.n	8003226 <DMA_CheckFifoParam+0xda>
 80031b6:	a201      	add	r2, pc, #4	; (adr r2, 80031bc <DMA_CheckFifoParam+0x70>)
 80031b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031bc:	080031cd 	.word	0x080031cd
 80031c0:	080031d3 	.word	0x080031d3
 80031c4:	080031cd 	.word	0x080031cd
 80031c8:	080031e5 	.word	0x080031e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
      break;
 80031d0:	e030      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d025      	beq.n	800322a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031e2:	e022      	b.n	800322a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031ec:	d11f      	bne.n	800322e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031f2:	e01c      	b.n	800322e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d903      	bls.n	8003202 <DMA_CheckFifoParam+0xb6>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d003      	beq.n	8003208 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003200:	e018      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	73fb      	strb	r3, [r7, #15]
      break;
 8003206:	e015      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00e      	beq.n	8003232 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	73fb      	strb	r3, [r7, #15]
      break;
 8003218:	e00b      	b.n	8003232 <DMA_CheckFifoParam+0xe6>
      break;
 800321a:	bf00      	nop
 800321c:	e00a      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
      break;
 800321e:	bf00      	nop
 8003220:	e008      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
      break;
 8003222:	bf00      	nop
 8003224:	e006      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
      break;
 8003226:	bf00      	nop
 8003228:	e004      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
      break;
 800322a:	bf00      	nop
 800322c:	e002      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
      break;   
 800322e:	bf00      	nop
 8003230:	e000      	b.n	8003234 <DMA_CheckFifoParam+0xe8>
      break;
 8003232:	bf00      	nop
    }
  } 
  
  return status; 
 8003234:	7bfb      	ldrb	r3, [r7, #15]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop

08003244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003244:	b480      	push	{r7}
 8003246:	b089      	sub	sp, #36	; 0x24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800324e:	2300      	movs	r3, #0
 8003250:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003256:	2300      	movs	r3, #0
 8003258:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800325a:	2300      	movs	r3, #0
 800325c:	61fb      	str	r3, [r7, #28]
 800325e:	e14d      	b.n	80034fc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003260:	2201      	movs	r2, #1
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	4013      	ands	r3, r2
 8003272:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	429a      	cmp	r2, r3
 800327a:	f040 813c 	bne.w	80034f6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	2b01      	cmp	r3, #1
 8003288:	d005      	beq.n	8003296 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003292:	2b02      	cmp	r3, #2
 8003294:	d130      	bne.n	80032f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	2203      	movs	r2, #3
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032cc:	2201      	movs	r2, #1
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	091b      	lsrs	r3, r3, #4
 80032e2:	f003 0201 	and.w	r2, r3, #1
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	2b03      	cmp	r3, #3
 8003302:	d017      	beq.n	8003334 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	2203      	movs	r2, #3
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4013      	ands	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 0303 	and.w	r3, r3, #3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d123      	bne.n	8003388 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	08da      	lsrs	r2, r3, #3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3208      	adds	r2, #8
 8003348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800334c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	220f      	movs	r2, #15
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4313      	orrs	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	08da      	lsrs	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3208      	adds	r2, #8
 8003382:	69b9      	ldr	r1, [r7, #24]
 8003384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	2203      	movs	r2, #3
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 0203 	and.w	r2, r3, #3
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8096 	beq.w	80034f6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	4b51      	ldr	r3, [pc, #324]	; (8003514 <HAL_GPIO_Init+0x2d0>)
 80033d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d2:	4a50      	ldr	r2, [pc, #320]	; (8003514 <HAL_GPIO_Init+0x2d0>)
 80033d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033d8:	6453      	str	r3, [r2, #68]	; 0x44
 80033da:	4b4e      	ldr	r3, [pc, #312]	; (8003514 <HAL_GPIO_Init+0x2d0>)
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033e6:	4a4c      	ldr	r2, [pc, #304]	; (8003518 <HAL_GPIO_Init+0x2d4>)
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	089b      	lsrs	r3, r3, #2
 80033ec:	3302      	adds	r3, #2
 80033ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	220f      	movs	r2, #15
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4013      	ands	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a43      	ldr	r2, [pc, #268]	; (800351c <HAL_GPIO_Init+0x2d8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00d      	beq.n	800342e <HAL_GPIO_Init+0x1ea>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a42      	ldr	r2, [pc, #264]	; (8003520 <HAL_GPIO_Init+0x2dc>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d007      	beq.n	800342a <HAL_GPIO_Init+0x1e6>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a41      	ldr	r2, [pc, #260]	; (8003524 <HAL_GPIO_Init+0x2e0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_GPIO_Init+0x1e2>
 8003422:	2302      	movs	r3, #2
 8003424:	e004      	b.n	8003430 <HAL_GPIO_Init+0x1ec>
 8003426:	2307      	movs	r3, #7
 8003428:	e002      	b.n	8003430 <HAL_GPIO_Init+0x1ec>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <HAL_GPIO_Init+0x1ec>
 800342e:	2300      	movs	r3, #0
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	f002 0203 	and.w	r2, r2, #3
 8003436:	0092      	lsls	r2, r2, #2
 8003438:	4093      	lsls	r3, r2
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003440:	4935      	ldr	r1, [pc, #212]	; (8003518 <HAL_GPIO_Init+0x2d4>)
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	089b      	lsrs	r3, r3, #2
 8003446:	3302      	adds	r3, #2
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800344e:	4b36      	ldr	r3, [pc, #216]	; (8003528 <HAL_GPIO_Init+0x2e4>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	43db      	mvns	r3, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4013      	ands	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003472:	4a2d      	ldr	r2, [pc, #180]	; (8003528 <HAL_GPIO_Init+0x2e4>)
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003478:	4b2b      	ldr	r3, [pc, #172]	; (8003528 <HAL_GPIO_Init+0x2e4>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800349c:	4a22      	ldr	r2, [pc, #136]	; (8003528 <HAL_GPIO_Init+0x2e4>)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034a2:	4b21      	ldr	r3, [pc, #132]	; (8003528 <HAL_GPIO_Init+0x2e4>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4013      	ands	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034c6:	4a18      	ldr	r2, [pc, #96]	; (8003528 <HAL_GPIO_Init+0x2e4>)
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034cc:	4b16      	ldr	r3, [pc, #88]	; (8003528 <HAL_GPIO_Init+0x2e4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034f0:	4a0d      	ldr	r2, [pc, #52]	; (8003528 <HAL_GPIO_Init+0x2e4>)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	3301      	adds	r3, #1
 80034fa:	61fb      	str	r3, [r7, #28]
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	2b0f      	cmp	r3, #15
 8003500:	f67f aeae 	bls.w	8003260 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	3724      	adds	r7, #36	; 0x24
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800
 8003518:	40013800 	.word	0x40013800
 800351c:	40020000 	.word	0x40020000
 8003520:	40020400 	.word	0x40020400
 8003524:	40020800 	.word	0x40020800
 8003528:	40013c00 	.word	0x40013c00

0800352c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	807b      	strh	r3, [r7, #2]
 8003538:	4613      	mov	r3, r2
 800353a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800353c:	787b      	ldrb	r3, [r7, #1]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003542:	887a      	ldrh	r2, [r7, #2]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003548:	e003      	b.n	8003552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800354a:	887b      	ldrh	r3, [r7, #2]
 800354c:	041a      	lsls	r2, r3, #16
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	619a      	str	r2, [r3, #24]
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800355e:	b480      	push	{r7}
 8003560:	b085      	sub	sp, #20
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	460b      	mov	r3, r1
 8003568:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003570:	887a      	ldrh	r2, [r7, #2]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4013      	ands	r3, r2
 8003576:	041a      	lsls	r2, r3, #16
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	43d9      	mvns	r1, r3
 800357c:	887b      	ldrh	r3, [r7, #2]
 800357e:	400b      	ands	r3, r1
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	619a      	str	r2, [r3, #24]
}
 8003586:	bf00      	nop
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
	...

08003594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0cc      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035a8:	4b68      	ldr	r3, [pc, #416]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d90c      	bls.n	80035d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b65      	ldr	r3, [pc, #404]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035be:	4b63      	ldr	r3, [pc, #396]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0b8      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d020      	beq.n	800361e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e8:	4b59      	ldr	r3, [pc, #356]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	4a58      	ldr	r2, [pc, #352]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003600:	4b53      	ldr	r3, [pc, #332]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	4a52      	ldr	r2, [pc, #328]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800360a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800360c:	4b50      	ldr	r3, [pc, #320]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	494d      	ldr	r1, [pc, #308]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	4313      	orrs	r3, r2
 800361c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d044      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d107      	bne.n	8003642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003632:	4b47      	ldr	r3, [pc, #284]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d119      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e07f      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d003      	beq.n	8003652 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800364e:	2b03      	cmp	r3, #3
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	4b3f      	ldr	r3, [pc, #252]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e06f      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003662:	4b3b      	ldr	r3, [pc, #236]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e067      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003672:	4b37      	ldr	r3, [pc, #220]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f023 0203 	bic.w	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4934      	ldr	r1, [pc, #208]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	4313      	orrs	r3, r2
 8003682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003684:	f7ff f920 	bl	80028c8 <HAL_GetTick>
 8003688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	e00a      	b.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368c:	f7ff f91c 	bl	80028c8 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	; 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e04f      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	4b2b      	ldr	r3, [pc, #172]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 020c 	and.w	r2, r3, #12
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d1eb      	bne.n	800368c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036b4:	4b25      	ldr	r3, [pc, #148]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d20c      	bcs.n	80036dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b22      	ldr	r3, [pc, #136]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ca:	4b20      	ldr	r3, [pc, #128]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e032      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e8:	4b19      	ldr	r3, [pc, #100]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	4916      	ldr	r1, [pc, #88]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d009      	beq.n	800371a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003706:	4b12      	ldr	r3, [pc, #72]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	490e      	ldr	r1, [pc, #56]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800371a:	f000 f821 	bl	8003760 <HAL_RCC_GetSysClockFreq>
 800371e:	4602      	mov	r2, r0
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	091b      	lsrs	r3, r3, #4
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	490a      	ldr	r1, [pc, #40]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 800372c:	5ccb      	ldrb	r3, [r1, r3]
 800372e:	fa22 f303 	lsr.w	r3, r2, r3
 8003732:	4a09      	ldr	r2, [pc, #36]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003736:	4b09      	ldr	r3, [pc, #36]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff f880 	bl	8002840 <HAL_InitTick>

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40023c00 	.word	0x40023c00
 8003750:	40023800 	.word	0x40023800
 8003754:	080054d0 	.word	0x080054d0
 8003758:	20000014 	.word	0x20000014
 800375c:	20000018 	.word	0x20000018

08003760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003764:	b090      	sub	sp, #64	; 0x40
 8003766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	637b      	str	r3, [r7, #52]	; 0x34
 800376c:	2300      	movs	r3, #0
 800376e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003770:	2300      	movs	r3, #0
 8003772:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003778:	4b59      	ldr	r3, [pc, #356]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 030c 	and.w	r3, r3, #12
 8003780:	2b08      	cmp	r3, #8
 8003782:	d00d      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003784:	2b08      	cmp	r3, #8
 8003786:	f200 80a1 	bhi.w	80038cc <HAL_RCC_GetSysClockFreq+0x16c>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x34>
 800378e:	2b04      	cmp	r3, #4
 8003790:	d003      	beq.n	800379a <HAL_RCC_GetSysClockFreq+0x3a>
 8003792:	e09b      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003794:	4b53      	ldr	r3, [pc, #332]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003796:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003798:	e09b      	b.n	80038d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800379a:	4b53      	ldr	r3, [pc, #332]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800379c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800379e:	e098      	b.n	80038d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037a0:	4b4f      	ldr	r3, [pc, #316]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037aa:	4b4d      	ldr	r3, [pc, #308]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d028      	beq.n	8003808 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b6:	4b4a      	ldr	r3, [pc, #296]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	099b      	lsrs	r3, r3, #6
 80037bc:	2200      	movs	r2, #0
 80037be:	623b      	str	r3, [r7, #32]
 80037c0:	627a      	str	r2, [r7, #36]	; 0x24
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037c8:	2100      	movs	r1, #0
 80037ca:	4b47      	ldr	r3, [pc, #284]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80037cc:	fb03 f201 	mul.w	r2, r3, r1
 80037d0:	2300      	movs	r3, #0
 80037d2:	fb00 f303 	mul.w	r3, r0, r3
 80037d6:	4413      	add	r3, r2
 80037d8:	4a43      	ldr	r2, [pc, #268]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80037da:	fba0 1202 	umull	r1, r2, r0, r2
 80037de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037e0:	460a      	mov	r2, r1
 80037e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80037e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e6:	4413      	add	r3, r2
 80037e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ec:	2200      	movs	r2, #0
 80037ee:	61bb      	str	r3, [r7, #24]
 80037f0:	61fa      	str	r2, [r7, #28]
 80037f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037fa:	f7fc fd0d 	bl	8000218 <__aeabi_uldivmod>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4613      	mov	r3, r2
 8003804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003806:	e053      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003808:	4b35      	ldr	r3, [pc, #212]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	099b      	lsrs	r3, r3, #6
 800380e:	2200      	movs	r2, #0
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	617a      	str	r2, [r7, #20]
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800381a:	f04f 0b00 	mov.w	fp, #0
 800381e:	4652      	mov	r2, sl
 8003820:	465b      	mov	r3, fp
 8003822:	f04f 0000 	mov.w	r0, #0
 8003826:	f04f 0100 	mov.w	r1, #0
 800382a:	0159      	lsls	r1, r3, #5
 800382c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003830:	0150      	lsls	r0, r2, #5
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	ebb2 080a 	subs.w	r8, r2, sl
 800383a:	eb63 090b 	sbc.w	r9, r3, fp
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800384a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800384e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003852:	ebb2 0408 	subs.w	r4, r2, r8
 8003856:	eb63 0509 	sbc.w	r5, r3, r9
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	00eb      	lsls	r3, r5, #3
 8003864:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003868:	00e2      	lsls	r2, r4, #3
 800386a:	4614      	mov	r4, r2
 800386c:	461d      	mov	r5, r3
 800386e:	eb14 030a 	adds.w	r3, r4, sl
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	eb45 030b 	adc.w	r3, r5, fp
 8003878:	607b      	str	r3, [r7, #4]
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003886:	4629      	mov	r1, r5
 8003888:	028b      	lsls	r3, r1, #10
 800388a:	4621      	mov	r1, r4
 800388c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003890:	4621      	mov	r1, r4
 8003892:	028a      	lsls	r2, r1, #10
 8003894:	4610      	mov	r0, r2
 8003896:	4619      	mov	r1, r3
 8003898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389a:	2200      	movs	r2, #0
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	60fa      	str	r2, [r7, #12]
 80038a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038a4:	f7fc fcb8 	bl	8000218 <__aeabi_uldivmod>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4613      	mov	r3, r2
 80038ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	0c1b      	lsrs	r3, r3, #16
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	3301      	adds	r3, #1
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038ca:	e002      	b.n	80038d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038cc:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80038ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3740      	adds	r7, #64	; 0x40
 80038d8:	46bd      	mov	sp, r7
 80038da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800
 80038e4:	00f42400 	.word	0x00f42400
 80038e8:	017d7840 	.word	0x017d7840

080038ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f0:	4b03      	ldr	r3, [pc, #12]	; (8003900 <HAL_RCC_GetHCLKFreq+0x14>)
 80038f2:	681b      	ldr	r3, [r3, #0]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000014 	.word	0x20000014

08003904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003908:	f7ff fff0 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 800390c:	4602      	mov	r2, r0
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	0a9b      	lsrs	r3, r3, #10
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	4903      	ldr	r1, [pc, #12]	; (8003928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800391a:	5ccb      	ldrb	r3, [r1, r3]
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40023800 	.word	0x40023800
 8003928:	080054e0 	.word	0x080054e0

0800392c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003930:	f7ff ffdc 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8003934:	4602      	mov	r2, r0
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	0b5b      	lsrs	r3, r3, #13
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	4903      	ldr	r1, [pc, #12]	; (8003950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003942:	5ccb      	ldrb	r3, [r1, r3]
 8003944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003948:	4618      	mov	r0, r3
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40023800 	.word	0x40023800
 8003950:	080054e0 	.word	0x080054e0

08003954 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e273      	b.n	8003e4e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d075      	beq.n	8003a5e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003972:	4b88      	ldr	r3, [pc, #544]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b04      	cmp	r3, #4
 800397c:	d00c      	beq.n	8003998 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397e:	4b85      	ldr	r3, [pc, #532]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003986:	2b08      	cmp	r3, #8
 8003988:	d112      	bne.n	80039b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398a:	4b82      	ldr	r3, [pc, #520]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003996:	d10b      	bne.n	80039b0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003998:	4b7e      	ldr	r3, [pc, #504]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d05b      	beq.n	8003a5c <HAL_RCC_OscConfig+0x108>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d157      	bne.n	8003a5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e24e      	b.n	8003e4e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b8:	d106      	bne.n	80039c8 <HAL_RCC_OscConfig+0x74>
 80039ba:	4b76      	ldr	r3, [pc, #472]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a75      	ldr	r2, [pc, #468]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e01d      	b.n	8003a04 <HAL_RCC_OscConfig+0xb0>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0x98>
 80039d2:	4b70      	ldr	r3, [pc, #448]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a6f      	ldr	r2, [pc, #444]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b6d      	ldr	r3, [pc, #436]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6c      	ldr	r2, [pc, #432]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e00b      	b.n	8003a04 <HAL_RCC_OscConfig+0xb0>
 80039ec:	4b69      	ldr	r3, [pc, #420]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a68      	ldr	r2, [pc, #416]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	4b66      	ldr	r3, [pc, #408]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a65      	ldr	r2, [pc, #404]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0c:	f7fe ff5c 	bl	80028c8 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fe ff58 	bl	80028c8 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	; 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e213      	b.n	8003e4e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	4b5b      	ldr	r3, [pc, #364]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0xc0>
 8003a32:	e014      	b.n	8003a5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fe ff48 	bl	80028c8 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fe ff44 	bl	80028c8 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e1ff      	b.n	8003e4e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	4b51      	ldr	r3, [pc, #324]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0xe8>
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d063      	beq.n	8003b32 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a6a:	4b4a      	ldr	r3, [pc, #296]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00b      	beq.n	8003a8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a76:	4b47      	ldr	r3, [pc, #284]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d11c      	bne.n	8003abc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a82:	4b44      	ldr	r3, [pc, #272]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d116      	bne.n	8003abc <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8e:	4b41      	ldr	r3, [pc, #260]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x152>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e1d3      	b.n	8003e4e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa6:	4b3b      	ldr	r3, [pc, #236]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4937      	ldr	r1, [pc, #220]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aba:	e03a      	b.n	8003b32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac4:	4b34      	ldr	r3, [pc, #208]	; (8003b98 <HAL_RCC_OscConfig+0x244>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aca:	f7fe fefd 	bl	80028c8 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad2:	f7fe fef9 	bl	80028c8 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e1b4      	b.n	8003e4e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae4:	4b2b      	ldr	r3, [pc, #172]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af0:	4b28      	ldr	r3, [pc, #160]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4925      	ldr	r1, [pc, #148]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	600b      	str	r3, [r1, #0]
 8003b04:	e015      	b.n	8003b32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b06:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <HAL_RCC_OscConfig+0x244>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fe fedc 	bl	80028c8 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b14:	f7fe fed8 	bl	80028c8 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e193      	b.n	8003e4e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b26:	4b1b      	ldr	r3, [pc, #108]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d036      	beq.n	8003bac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d016      	beq.n	8003b74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b46:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <HAL_RCC_OscConfig+0x248>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7fe febc 	bl	80028c8 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b54:	f7fe feb8 	bl	80028c8 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e173      	b.n	8003e4e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b66:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x200>
 8003b72:	e01b      	b.n	8003bac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b74:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <HAL_RCC_OscConfig+0x248>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b7a:	f7fe fea5 	bl	80028c8 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b80:	e00e      	b.n	8003ba0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b82:	f7fe fea1 	bl	80028c8 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d907      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e15c      	b.n	8003e4e <HAL_RCC_OscConfig+0x4fa>
 8003b94:	40023800 	.word	0x40023800
 8003b98:	42470000 	.word	0x42470000
 8003b9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba0:	4b8a      	ldr	r3, [pc, #552]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1ea      	bne.n	8003b82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8097 	beq.w	8003ce8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bbe:	4b83      	ldr	r3, [pc, #524]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10f      	bne.n	8003bea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	4b7f      	ldr	r3, [pc, #508]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	4a7e      	ldr	r2, [pc, #504]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bda:	4b7c      	ldr	r3, [pc, #496]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be6:	2301      	movs	r3, #1
 8003be8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bea:	4b79      	ldr	r3, [pc, #484]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d118      	bne.n	8003c28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf6:	4b76      	ldr	r3, [pc, #472]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a75      	ldr	r2, [pc, #468]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c02:	f7fe fe61 	bl	80028c8 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0a:	f7fe fe5d 	bl	80028c8 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e118      	b.n	8003e4e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1c:	4b6c      	ldr	r3, [pc, #432]	; (8003dd0 <HAL_RCC_OscConfig+0x47c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d106      	bne.n	8003c3e <HAL_RCC_OscConfig+0x2ea>
 8003c30:	4b66      	ldr	r3, [pc, #408]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c34:	4a65      	ldr	r2, [pc, #404]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c3c:	e01c      	b.n	8003c78 <HAL_RCC_OscConfig+0x324>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b05      	cmp	r3, #5
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCC_OscConfig+0x30c>
 8003c46:	4b61      	ldr	r3, [pc, #388]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4a:	4a60      	ldr	r2, [pc, #384]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003c4c:	f043 0304 	orr.w	r3, r3, #4
 8003c50:	6713      	str	r3, [r2, #112]	; 0x70
 8003c52:	4b5e      	ldr	r3, [pc, #376]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	4a5d      	ldr	r2, [pc, #372]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5e:	e00b      	b.n	8003c78 <HAL_RCC_OscConfig+0x324>
 8003c60:	4b5a      	ldr	r3, [pc, #360]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c64:	4a59      	ldr	r2, [pc, #356]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003c66:	f023 0301 	bic.w	r3, r3, #1
 8003c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6c:	4b57      	ldr	r3, [pc, #348]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	4a56      	ldr	r2, [pc, #344]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003c72:	f023 0304 	bic.w	r3, r3, #4
 8003c76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d015      	beq.n	8003cac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7fe fe22 	bl	80028c8 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c88:	f7fe fe1e 	bl	80028c8 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e0d7      	b.n	8003e4e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9e:	4b4b      	ldr	r3, [pc, #300]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0ee      	beq.n	8003c88 <HAL_RCC_OscConfig+0x334>
 8003caa:	e014      	b.n	8003cd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cac:	f7fe fe0c 	bl	80028c8 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb4:	f7fe fe08 	bl	80028c8 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e0c1      	b.n	8003e4e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cca:	4b40      	ldr	r3, [pc, #256]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1ee      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cd6:	7dfb      	ldrb	r3, [r7, #23]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d105      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cdc:	4b3b      	ldr	r3, [pc, #236]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	4a3a      	ldr	r2, [pc, #232]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80ad 	beq.w	8003e4c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cf2:	4b36      	ldr	r3, [pc, #216]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d060      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d145      	bne.n	8003d92 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d06:	4b33      	ldr	r3, [pc, #204]	; (8003dd4 <HAL_RCC_OscConfig+0x480>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7fe fddc 	bl	80028c8 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d14:	f7fe fdd8 	bl	80028c8 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e093      	b.n	8003e4e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d26:	4b29      	ldr	r3, [pc, #164]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69da      	ldr	r2, [r3, #28]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	019b      	lsls	r3, r3, #6
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	085b      	lsrs	r3, r3, #1
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	041b      	lsls	r3, r3, #16
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	061b      	lsls	r3, r3, #24
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	071b      	lsls	r3, r3, #28
 8003d5e:	491b      	ldr	r1, [pc, #108]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d64:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <HAL_RCC_OscConfig+0x480>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6a:	f7fe fdad 	bl	80028c8 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d72:	f7fe fda9 	bl	80028c8 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e064      	b.n	8003e4e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d84:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x41e>
 8003d90:	e05c      	b.n	8003e4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <HAL_RCC_OscConfig+0x480>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d98:	f7fe fd96 	bl	80028c8 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da0:	f7fe fd92 	bl	80028c8 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e04d      	b.n	8003e4e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f0      	bne.n	8003da0 <HAL_RCC_OscConfig+0x44c>
 8003dbe:	e045      	b.n	8003e4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d107      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e040      	b.n	8003e4e <HAL_RCC_OscConfig+0x4fa>
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40007000 	.word	0x40007000
 8003dd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dd8:	4b1f      	ldr	r3, [pc, #124]	; (8003e58 <HAL_RCC_OscConfig+0x504>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d030      	beq.n	8003e48 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d129      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d122      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e08:	4013      	ands	r3, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d119      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	085b      	lsrs	r3, r3, #1
 8003e20:	3b01      	subs	r3, #1
 8003e22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d10f      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d107      	bne.n	8003e48 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40023800 	.word	0x40023800

08003e5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e03f      	b.n	8003eee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fe fb4a 	bl	800251c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2224      	movs	r2, #36	; 0x24
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 fd7b 	bl	800499c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695a      	ldr	r2, [r3, #20]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ec4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ed4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b08a      	sub	sp, #40	; 0x28
 8003efa:	af02      	add	r7, sp, #8
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	603b      	str	r3, [r7, #0]
 8003f02:	4613      	mov	r3, r2
 8003f04:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d17c      	bne.n	8004010 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_UART_Transmit+0x2c>
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e075      	b.n	8004012 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_UART_Transmit+0x3e>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e06e      	b.n	8004012 <HAL_UART_Transmit+0x11c>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2221      	movs	r2, #33	; 0x21
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f4a:	f7fe fcbd 	bl	80028c8 <HAL_GetTick>
 8003f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	88fa      	ldrh	r2, [r7, #6]
 8003f54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	88fa      	ldrh	r2, [r7, #6]
 8003f5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f64:	d108      	bne.n	8003f78 <HAL_UART_Transmit+0x82>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d104      	bne.n	8003f78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	e003      	b.n	8003f80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f88:	e02a      	b.n	8003fe0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2200      	movs	r2, #0
 8003f92:	2180      	movs	r1, #128	; 0x80
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 faf9 	bl	800458c <UART_WaitOnFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e036      	b.n	8004012 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10b      	bne.n	8003fc2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	61bb      	str	r3, [r7, #24]
 8003fc0:	e007      	b.n	8003fd2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	781a      	ldrb	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1cf      	bne.n	8003f8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2140      	movs	r1, #64	; 0x40
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 fac9 	bl	800458c <UART_WaitOnFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e006      	b.n	8004012 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e000      	b.n	8004012 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
  }
}
 8004012:	4618      	mov	r0, r3
 8004014:	3720      	adds	r7, #32
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b0ba      	sub	sp, #232	; 0xe8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004042:	2300      	movs	r3, #0
 8004044:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004048:	2300      	movs	r3, #0
 800404a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800404e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800405a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10f      	bne.n	8004082 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b00      	cmp	r3, #0
 800406c:	d009      	beq.n	8004082 <HAL_UART_IRQHandler+0x66>
 800406e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fbd3 	bl	8004826 <UART_Receive_IT>
      return;
 8004080:	e256      	b.n	8004530 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004082:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 80de 	beq.w	8004248 <HAL_UART_IRQHandler+0x22c>
 800408c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d106      	bne.n	80040a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800409c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 80d1 	beq.w	8004248 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00b      	beq.n	80040ca <HAL_UART_IRQHandler+0xae>
 80040b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	f043 0201 	orr.w	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00b      	beq.n	80040ee <HAL_UART_IRQHandler+0xd2>
 80040d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d005      	beq.n	80040ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	f043 0202 	orr.w	r2, r3, #2
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00b      	beq.n	8004112 <HAL_UART_IRQHandler+0xf6>
 80040fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d005      	beq.n	8004112 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	f043 0204 	orr.w	r2, r3, #4
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d011      	beq.n	8004142 <HAL_UART_IRQHandler+0x126>
 800411e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d105      	bne.n	8004136 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800412a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f043 0208 	orr.w	r2, r3, #8
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 81ed 	beq.w	8004526 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800414c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d008      	beq.n	800416a <HAL_UART_IRQHandler+0x14e>
 8004158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fb5e 	bl	8004826 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004174:	2b40      	cmp	r3, #64	; 0x40
 8004176:	bf0c      	ite	eq
 8004178:	2301      	moveq	r3, #1
 800417a:	2300      	movne	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d103      	bne.n	8004196 <HAL_UART_IRQHandler+0x17a>
 800418e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d04f      	beq.n	8004236 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fa66 	bl	8004668 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a6:	2b40      	cmp	r3, #64	; 0x40
 80041a8:	d141      	bne.n	800422e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3314      	adds	r3, #20
 80041b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041b8:	e853 3f00 	ldrex	r3, [r3]
 80041bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3314      	adds	r3, #20
 80041d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80041d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80041da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80041e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80041e6:	e841 2300 	strex	r3, r2, [r1]
 80041ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80041ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1d9      	bne.n	80041aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d013      	beq.n	8004226 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	4a7d      	ldr	r2, [pc, #500]	; (80043f8 <HAL_UART_IRQHandler+0x3dc>)
 8004204:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe fdbc 	bl	8002d88 <HAL_DMA_Abort_IT>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d016      	beq.n	8004244 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004220:	4610      	mov	r0, r2
 8004222:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004224:	e00e      	b.n	8004244 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f99a 	bl	8004560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422c:	e00a      	b.n	8004244 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f996 	bl	8004560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004234:	e006      	b.n	8004244 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f992 	bl	8004560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004242:	e170      	b.n	8004526 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004244:	bf00      	nop
    return;
 8004246:	e16e      	b.n	8004526 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	2b01      	cmp	r3, #1
 800424e:	f040 814a 	bne.w	80044e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004256:	f003 0310 	and.w	r3, r3, #16
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 8143 	beq.w	80044e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 813c 	beq.w	80044e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800426e:	2300      	movs	r3, #0
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428e:	2b40      	cmp	r3, #64	; 0x40
 8004290:	f040 80b4 	bne.w	80043fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 8140 	beq.w	800452a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042b2:	429a      	cmp	r2, r3
 80042b4:	f080 8139 	bcs.w	800452a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ca:	f000 8088 	beq.w	80043de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	330c      	adds	r3, #12
 80042d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80042e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	330c      	adds	r3, #12
 80042f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80042fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004302:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004306:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1d9      	bne.n	80042ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3314      	adds	r3, #20
 8004320:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800432a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800432c:	f023 0301 	bic.w	r3, r3, #1
 8004330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3314      	adds	r3, #20
 800433a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800433e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004342:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004344:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004346:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800434a:	e841 2300 	strex	r3, r2, [r1]
 800434e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004350:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1e1      	bne.n	800431a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3314      	adds	r3, #20
 800435c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004360:	e853 3f00 	ldrex	r3, [r3]
 8004364:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800436c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3314      	adds	r3, #20
 8004376:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800437a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800437c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004380:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004382:	e841 2300 	strex	r3, r2, [r1]
 8004386:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e3      	bne.n	8004356 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	330c      	adds	r3, #12
 80043a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a6:	e853 3f00 	ldrex	r3, [r3]
 80043aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ae:	f023 0310 	bic.w	r3, r3, #16
 80043b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	330c      	adds	r3, #12
 80043bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80043c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80043c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e3      	bne.n	800439c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fe fc65 	bl	8002ca8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	4619      	mov	r1, r3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f8c0 	bl	8004574 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043f4:	e099      	b.n	800452a <HAL_UART_IRQHandler+0x50e>
 80043f6:	bf00      	nop
 80043f8:	0800472f 	.word	0x0800472f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004404:	b29b      	uxth	r3, r3
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 808b 	beq.w	800452e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 8086 	beq.w	800452e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	330c      	adds	r3, #12
 8004428:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004434:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004438:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	330c      	adds	r3, #12
 8004442:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004446:	647a      	str	r2, [r7, #68]	; 0x44
 8004448:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800444c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e3      	bne.n	8004422 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3314      	adds	r3, #20
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	e853 3f00 	ldrex	r3, [r3]
 8004468:	623b      	str	r3, [r7, #32]
   return(result);
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	f023 0301 	bic.w	r3, r3, #1
 8004470:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3314      	adds	r3, #20
 800447a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800447e:	633a      	str	r2, [r7, #48]	; 0x30
 8004480:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004486:	e841 2300 	strex	r3, r2, [r1]
 800448a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1e3      	bne.n	800445a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	e853 3f00 	ldrex	r3, [r3]
 80044ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0310 	bic.w	r3, r3, #16
 80044b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	330c      	adds	r3, #12
 80044c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80044c4:	61fa      	str	r2, [r7, #28]
 80044c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	69b9      	ldr	r1, [r7, #24]
 80044ca:	69fa      	ldr	r2, [r7, #28]
 80044cc:	e841 2300 	strex	r3, r2, [r1]
 80044d0:	617b      	str	r3, [r7, #20]
   return(result);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e3      	bne.n	80044a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044dc:	4619      	mov	r1, r3
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f848 	bl	8004574 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044e4:	e023      	b.n	800452e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d009      	beq.n	8004506 <HAL_UART_IRQHandler+0x4ea>
 80044f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f929 	bl	8004756 <UART_Transmit_IT>
    return;
 8004504:	e014      	b.n	8004530 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00e      	beq.n	8004530 <HAL_UART_IRQHandler+0x514>
 8004512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451a:	2b00      	cmp	r3, #0
 800451c:	d008      	beq.n	8004530 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f969 	bl	80047f6 <UART_EndTransmit_IT>
    return;
 8004524:	e004      	b.n	8004530 <HAL_UART_IRQHandler+0x514>
    return;
 8004526:	bf00      	nop
 8004528:	e002      	b.n	8004530 <HAL_UART_IRQHandler+0x514>
      return;
 800452a:	bf00      	nop
 800452c:	e000      	b.n	8004530 <HAL_UART_IRQHandler+0x514>
      return;
 800452e:	bf00      	nop
  }
}
 8004530:	37e8      	adds	r7, #232	; 0xe8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop

08004538 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b090      	sub	sp, #64	; 0x40
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	4613      	mov	r3, r2
 800459a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800459c:	e050      	b.n	8004640 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800459e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045a4:	d04c      	beq.n	8004640 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d007      	beq.n	80045bc <UART_WaitOnFlagUntilTimeout+0x30>
 80045ac:	f7fe f98c 	bl	80028c8 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d241      	bcs.n	8004640 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	330c      	adds	r3, #12
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	e853 3f00 	ldrex	r3, [r3]
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	330c      	adds	r3, #12
 80045da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045dc:	637a      	str	r2, [r7, #52]	; 0x34
 80045de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045e4:	e841 2300 	strex	r3, r2, [r1]
 80045e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e5      	bne.n	80045bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3314      	adds	r3, #20
 80045f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	e853 3f00 	ldrex	r3, [r3]
 80045fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f023 0301 	bic.w	r3, r3, #1
 8004606:	63bb      	str	r3, [r7, #56]	; 0x38
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3314      	adds	r3, #20
 800460e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004610:	623a      	str	r2, [r7, #32]
 8004612:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	69f9      	ldr	r1, [r7, #28]
 8004616:	6a3a      	ldr	r2, [r7, #32]
 8004618:	e841 2300 	strex	r3, r2, [r1]
 800461c:	61bb      	str	r3, [r7, #24]
   return(result);
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e5      	bne.n	80045f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e00f      	b.n	8004660 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	4013      	ands	r3, r2
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	429a      	cmp	r2, r3
 800464e:	bf0c      	ite	eq
 8004650:	2301      	moveq	r3, #1
 8004652:	2300      	movne	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	461a      	mov	r2, r3
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	429a      	cmp	r2, r3
 800465c:	d09f      	beq.n	800459e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3740      	adds	r7, #64	; 0x40
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004668:	b480      	push	{r7}
 800466a:	b095      	sub	sp, #84	; 0x54
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	330c      	adds	r3, #12
 8004676:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467a:	e853 3f00 	ldrex	r3, [r3]
 800467e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004682:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	330c      	adds	r3, #12
 800468e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004690:	643a      	str	r2, [r7, #64]	; 0x40
 8004692:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004696:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e5      	bne.n	8004670 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3314      	adds	r3, #20
 80046aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	e853 3f00 	ldrex	r3, [r3]
 80046b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f023 0301 	bic.w	r3, r3, #1
 80046ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3314      	adds	r3, #20
 80046c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e5      	bne.n	80046a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d119      	bne.n	8004714 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	330c      	adds	r3, #12
 80046e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	e853 3f00 	ldrex	r3, [r3]
 80046ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f023 0310 	bic.w	r3, r3, #16
 80046f6:	647b      	str	r3, [r7, #68]	; 0x44
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004700:	61ba      	str	r2, [r7, #24]
 8004702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004704:	6979      	ldr	r1, [r7, #20]
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	e841 2300 	strex	r3, r2, [r1]
 800470c:	613b      	str	r3, [r7, #16]
   return(result);
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1e5      	bne.n	80046e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004722:	bf00      	nop
 8004724:	3754      	adds	r7, #84	; 0x54
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b084      	sub	sp, #16
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f7ff ff09 	bl	8004560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800474e:	bf00      	nop
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004756:	b480      	push	{r7}
 8004758:	b085      	sub	sp, #20
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b21      	cmp	r3, #33	; 0x21
 8004768:	d13e      	bne.n	80047e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004772:	d114      	bne.n	800479e <UART_Transmit_IT+0x48>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d110      	bne.n	800479e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004790:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	1c9a      	adds	r2, r3, #2
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	621a      	str	r2, [r3, #32]
 800479c:	e008      	b.n	80047b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	1c59      	adds	r1, r3, #1
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6211      	str	r1, [r2, #32]
 80047a8:	781a      	ldrb	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	4619      	mov	r1, r3
 80047be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10f      	bne.n	80047e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e000      	b.n	80047ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047e8:	2302      	movs	r3, #2
  }
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b082      	sub	sp, #8
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800480c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2220      	movs	r2, #32
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff fe8e 	bl	8004538 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b08c      	sub	sp, #48	; 0x30
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b22      	cmp	r3, #34	; 0x22
 8004838:	f040 80ab 	bne.w	8004992 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004844:	d117      	bne.n	8004876 <UART_Receive_IT+0x50>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d113      	bne.n	8004876 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800484e:	2300      	movs	r3, #0
 8004850:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004856:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	b29b      	uxth	r3, r3
 8004860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004864:	b29a      	uxth	r2, r3
 8004866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004868:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486e:	1c9a      	adds	r2, r3, #2
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	629a      	str	r2, [r3, #40]	; 0x28
 8004874:	e026      	b.n	80048c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800487c:	2300      	movs	r3, #0
 800487e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004888:	d007      	beq.n	800489a <UART_Receive_IT+0x74>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10a      	bne.n	80048a8 <UART_Receive_IT+0x82>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	e008      	b.n	80048ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	4619      	mov	r1, r3
 80048d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d15a      	bne.n	800498e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0220 	bic.w	r2, r2, #32
 80048e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0201 	bic.w	r2, r2, #1
 8004906:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	2b01      	cmp	r3, #1
 8004916:	d135      	bne.n	8004984 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	330c      	adds	r3, #12
 8004924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	e853 3f00 	ldrex	r3, [r3]
 800492c:	613b      	str	r3, [r7, #16]
   return(result);
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	f023 0310 	bic.w	r3, r3, #16
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	330c      	adds	r3, #12
 800493c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800493e:	623a      	str	r2, [r7, #32]
 8004940:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004942:	69f9      	ldr	r1, [r7, #28]
 8004944:	6a3a      	ldr	r2, [r7, #32]
 8004946:	e841 2300 	strex	r3, r2, [r1]
 800494a:	61bb      	str	r3, [r7, #24]
   return(result);
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1e5      	bne.n	800491e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0310 	and.w	r3, r3, #16
 800495c:	2b10      	cmp	r3, #16
 800495e:	d10a      	bne.n	8004976 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800497a:	4619      	mov	r1, r3
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff fdf9 	bl	8004574 <HAL_UARTEx_RxEventCallback>
 8004982:	e002      	b.n	800498a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff fde1 	bl	800454c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	e002      	b.n	8004994 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	e000      	b.n	8004994 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004992:	2302      	movs	r3, #2
  }
}
 8004994:	4618      	mov	r0, r3
 8004996:	3730      	adds	r7, #48	; 0x30
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800499c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049a0:	b0c0      	sub	sp, #256	; 0x100
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b8:	68d9      	ldr	r1, [r3, #12]
 80049ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	ea40 0301 	orr.w	r3, r0, r1
 80049c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	431a      	orrs	r2, r3
 80049d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	431a      	orrs	r2, r3
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049f4:	f021 010c 	bic.w	r1, r1, #12
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a02:	430b      	orrs	r3, r1
 8004a04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a16:	6999      	ldr	r1, [r3, #24]
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	ea40 0301 	orr.w	r3, r0, r1
 8004a22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	4b8f      	ldr	r3, [pc, #572]	; (8004c68 <UART_SetConfig+0x2cc>)
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d005      	beq.n	8004a3c <UART_SetConfig+0xa0>
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	4b8d      	ldr	r3, [pc, #564]	; (8004c6c <UART_SetConfig+0x2d0>)
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d104      	bne.n	8004a46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a3c:	f7fe ff76 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 8004a40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a44:	e003      	b.n	8004a4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a46:	f7fe ff5d 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 8004a4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a58:	f040 810c 	bne.w	8004c74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a60:	2200      	movs	r2, #0
 8004a62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a6e:	4622      	mov	r2, r4
 8004a70:	462b      	mov	r3, r5
 8004a72:	1891      	adds	r1, r2, r2
 8004a74:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a76:	415b      	adcs	r3, r3
 8004a78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a7e:	4621      	mov	r1, r4
 8004a80:	eb12 0801 	adds.w	r8, r2, r1
 8004a84:	4629      	mov	r1, r5
 8004a86:	eb43 0901 	adc.w	r9, r3, r1
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a9e:	4690      	mov	r8, r2
 8004aa0:	4699      	mov	r9, r3
 8004aa2:	4623      	mov	r3, r4
 8004aa4:	eb18 0303 	adds.w	r3, r8, r3
 8004aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004aac:	462b      	mov	r3, r5
 8004aae:	eb49 0303 	adc.w	r3, r9, r3
 8004ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ac2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ac6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004aca:	460b      	mov	r3, r1
 8004acc:	18db      	adds	r3, r3, r3
 8004ace:	653b      	str	r3, [r7, #80]	; 0x50
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	eb42 0303 	adc.w	r3, r2, r3
 8004ad6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ad8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004adc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ae0:	f7fb fb9a 	bl	8000218 <__aeabi_uldivmod>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4b61      	ldr	r3, [pc, #388]	; (8004c70 <UART_SetConfig+0x2d4>)
 8004aea:	fba3 2302 	umull	r2, r3, r3, r2
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	011c      	lsls	r4, r3, #4
 8004af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004af6:	2200      	movs	r2, #0
 8004af8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004afc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b04:	4642      	mov	r2, r8
 8004b06:	464b      	mov	r3, r9
 8004b08:	1891      	adds	r1, r2, r2
 8004b0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b0c:	415b      	adcs	r3, r3
 8004b0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b14:	4641      	mov	r1, r8
 8004b16:	eb12 0a01 	adds.w	sl, r2, r1
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	eb43 0b01 	adc.w	fp, r3, r1
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b34:	4692      	mov	sl, r2
 8004b36:	469b      	mov	fp, r3
 8004b38:	4643      	mov	r3, r8
 8004b3a:	eb1a 0303 	adds.w	r3, sl, r3
 8004b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b42:	464b      	mov	r3, r9
 8004b44:	eb4b 0303 	adc.w	r3, fp, r3
 8004b48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b60:	460b      	mov	r3, r1
 8004b62:	18db      	adds	r3, r3, r3
 8004b64:	643b      	str	r3, [r7, #64]	; 0x40
 8004b66:	4613      	mov	r3, r2
 8004b68:	eb42 0303 	adc.w	r3, r2, r3
 8004b6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b76:	f7fb fb4f 	bl	8000218 <__aeabi_uldivmod>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4611      	mov	r1, r2
 8004b80:	4b3b      	ldr	r3, [pc, #236]	; (8004c70 <UART_SetConfig+0x2d4>)
 8004b82:	fba3 2301 	umull	r2, r3, r3, r1
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	2264      	movs	r2, #100	; 0x64
 8004b8a:	fb02 f303 	mul.w	r3, r2, r3
 8004b8e:	1acb      	subs	r3, r1, r3
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b96:	4b36      	ldr	r3, [pc, #216]	; (8004c70 <UART_SetConfig+0x2d4>)
 8004b98:	fba3 2302 	umull	r2, r3, r3, r2
 8004b9c:	095b      	lsrs	r3, r3, #5
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ba4:	441c      	add	r4, r3
 8004ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004bb8:	4642      	mov	r2, r8
 8004bba:	464b      	mov	r3, r9
 8004bbc:	1891      	adds	r1, r2, r2
 8004bbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bc0:	415b      	adcs	r3, r3
 8004bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bc8:	4641      	mov	r1, r8
 8004bca:	1851      	adds	r1, r2, r1
 8004bcc:	6339      	str	r1, [r7, #48]	; 0x30
 8004bce:	4649      	mov	r1, r9
 8004bd0:	414b      	adcs	r3, r1
 8004bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004be0:	4659      	mov	r1, fp
 8004be2:	00cb      	lsls	r3, r1, #3
 8004be4:	4651      	mov	r1, sl
 8004be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bea:	4651      	mov	r1, sl
 8004bec:	00ca      	lsls	r2, r1, #3
 8004bee:	4610      	mov	r0, r2
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	4642      	mov	r2, r8
 8004bf6:	189b      	adds	r3, r3, r2
 8004bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bfc:	464b      	mov	r3, r9
 8004bfe:	460a      	mov	r2, r1
 8004c00:	eb42 0303 	adc.w	r3, r2, r3
 8004c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	18db      	adds	r3, r3, r3
 8004c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c22:	4613      	mov	r3, r2
 8004c24:	eb42 0303 	adc.w	r3, r2, r3
 8004c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c32:	f7fb faf1 	bl	8000218 <__aeabi_uldivmod>
 8004c36:	4602      	mov	r2, r0
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4b0d      	ldr	r3, [pc, #52]	; (8004c70 <UART_SetConfig+0x2d4>)
 8004c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	2164      	movs	r1, #100	; 0x64
 8004c44:	fb01 f303 	mul.w	r3, r1, r3
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	3332      	adds	r3, #50	; 0x32
 8004c4e:	4a08      	ldr	r2, [pc, #32]	; (8004c70 <UART_SetConfig+0x2d4>)
 8004c50:	fba2 2303 	umull	r2, r3, r2, r3
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	f003 0207 	and.w	r2, r3, #7
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4422      	add	r2, r4
 8004c62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c64:	e105      	b.n	8004e72 <UART_SetConfig+0x4d6>
 8004c66:	bf00      	nop
 8004c68:	40011000 	.word	0x40011000
 8004c6c:	40011400 	.word	0x40011400
 8004c70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c86:	4642      	mov	r2, r8
 8004c88:	464b      	mov	r3, r9
 8004c8a:	1891      	adds	r1, r2, r2
 8004c8c:	6239      	str	r1, [r7, #32]
 8004c8e:	415b      	adcs	r3, r3
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
 8004c92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c96:	4641      	mov	r1, r8
 8004c98:	1854      	adds	r4, r2, r1
 8004c9a:	4649      	mov	r1, r9
 8004c9c:	eb43 0501 	adc.w	r5, r3, r1
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	00eb      	lsls	r3, r5, #3
 8004caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cae:	00e2      	lsls	r2, r4, #3
 8004cb0:	4614      	mov	r4, r2
 8004cb2:	461d      	mov	r5, r3
 8004cb4:	4643      	mov	r3, r8
 8004cb6:	18e3      	adds	r3, r4, r3
 8004cb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cbc:	464b      	mov	r3, r9
 8004cbe:	eb45 0303 	adc.w	r3, r5, r3
 8004cc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ce2:	4629      	mov	r1, r5
 8004ce4:	008b      	lsls	r3, r1, #2
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cec:	4621      	mov	r1, r4
 8004cee:	008a      	lsls	r2, r1, #2
 8004cf0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cf4:	f7fb fa90 	bl	8000218 <__aeabi_uldivmod>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4b60      	ldr	r3, [pc, #384]	; (8004e80 <UART_SetConfig+0x4e4>)
 8004cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	011c      	lsls	r4, r3, #4
 8004d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d18:	4642      	mov	r2, r8
 8004d1a:	464b      	mov	r3, r9
 8004d1c:	1891      	adds	r1, r2, r2
 8004d1e:	61b9      	str	r1, [r7, #24]
 8004d20:	415b      	adcs	r3, r3
 8004d22:	61fb      	str	r3, [r7, #28]
 8004d24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d28:	4641      	mov	r1, r8
 8004d2a:	1851      	adds	r1, r2, r1
 8004d2c:	6139      	str	r1, [r7, #16]
 8004d2e:	4649      	mov	r1, r9
 8004d30:	414b      	adcs	r3, r1
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d40:	4659      	mov	r1, fp
 8004d42:	00cb      	lsls	r3, r1, #3
 8004d44:	4651      	mov	r1, sl
 8004d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d4a:	4651      	mov	r1, sl
 8004d4c:	00ca      	lsls	r2, r1, #3
 8004d4e:	4610      	mov	r0, r2
 8004d50:	4619      	mov	r1, r3
 8004d52:	4603      	mov	r3, r0
 8004d54:	4642      	mov	r2, r8
 8004d56:	189b      	adds	r3, r3, r2
 8004d58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d5c:	464b      	mov	r3, r9
 8004d5e:	460a      	mov	r2, r1
 8004d60:	eb42 0303 	adc.w	r3, r2, r3
 8004d64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d74:	f04f 0200 	mov.w	r2, #0
 8004d78:	f04f 0300 	mov.w	r3, #0
 8004d7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d80:	4649      	mov	r1, r9
 8004d82:	008b      	lsls	r3, r1, #2
 8004d84:	4641      	mov	r1, r8
 8004d86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d8a:	4641      	mov	r1, r8
 8004d8c:	008a      	lsls	r2, r1, #2
 8004d8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d92:	f7fb fa41 	bl	8000218 <__aeabi_uldivmod>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4b39      	ldr	r3, [pc, #228]	; (8004e80 <UART_SetConfig+0x4e4>)
 8004d9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004da0:	095b      	lsrs	r3, r3, #5
 8004da2:	2164      	movs	r1, #100	; 0x64
 8004da4:	fb01 f303 	mul.w	r3, r1, r3
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	3332      	adds	r3, #50	; 0x32
 8004dae:	4a34      	ldr	r2, [pc, #208]	; (8004e80 <UART_SetConfig+0x4e4>)
 8004db0:	fba2 2303 	umull	r2, r3, r2, r3
 8004db4:	095b      	lsrs	r3, r3, #5
 8004db6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dba:	441c      	add	r4, r3
 8004dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	673b      	str	r3, [r7, #112]	; 0x70
 8004dc4:	677a      	str	r2, [r7, #116]	; 0x74
 8004dc6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004dca:	4642      	mov	r2, r8
 8004dcc:	464b      	mov	r3, r9
 8004dce:	1891      	adds	r1, r2, r2
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	415b      	adcs	r3, r3
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dda:	4641      	mov	r1, r8
 8004ddc:	1851      	adds	r1, r2, r1
 8004dde:	6039      	str	r1, [r7, #0]
 8004de0:	4649      	mov	r1, r9
 8004de2:	414b      	adcs	r3, r1
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004df2:	4659      	mov	r1, fp
 8004df4:	00cb      	lsls	r3, r1, #3
 8004df6:	4651      	mov	r1, sl
 8004df8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dfc:	4651      	mov	r1, sl
 8004dfe:	00ca      	lsls	r2, r1, #3
 8004e00:	4610      	mov	r0, r2
 8004e02:	4619      	mov	r1, r3
 8004e04:	4603      	mov	r3, r0
 8004e06:	4642      	mov	r2, r8
 8004e08:	189b      	adds	r3, r3, r2
 8004e0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e0c:	464b      	mov	r3, r9
 8004e0e:	460a      	mov	r2, r1
 8004e10:	eb42 0303 	adc.w	r3, r2, r3
 8004e14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	663b      	str	r3, [r7, #96]	; 0x60
 8004e20:	667a      	str	r2, [r7, #100]	; 0x64
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	f04f 0300 	mov.w	r3, #0
 8004e2a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e2e:	4649      	mov	r1, r9
 8004e30:	008b      	lsls	r3, r1, #2
 8004e32:	4641      	mov	r1, r8
 8004e34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e38:	4641      	mov	r1, r8
 8004e3a:	008a      	lsls	r2, r1, #2
 8004e3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e40:	f7fb f9ea 	bl	8000218 <__aeabi_uldivmod>
 8004e44:	4602      	mov	r2, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <UART_SetConfig+0x4e4>)
 8004e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	2164      	movs	r1, #100	; 0x64
 8004e52:	fb01 f303 	mul.w	r3, r1, r3
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	3332      	adds	r3, #50	; 0x32
 8004e5c:	4a08      	ldr	r2, [pc, #32]	; (8004e80 <UART_SetConfig+0x4e4>)
 8004e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	f003 020f 	and.w	r2, r3, #15
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4422      	add	r2, r4
 8004e70:	609a      	str	r2, [r3, #8]
}
 8004e72:	bf00      	nop
 8004e74:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e7e:	bf00      	nop
 8004e80:	51eb851f 	.word	0x51eb851f

08004e84 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "../ros_lib/ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	0a5a      	lsrs	r2, r3, #9
 8004e94:	490f      	ldr	r1, [pc, #60]	; (8004ed4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004e96:	fba1 1202 	umull	r1, r2, r1, r2
 8004e9a:	09d2      	lsrs	r2, r2, #7
 8004e9c:	490e      	ldr	r1, [pc, #56]	; (8004ed8 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8004e9e:	fb01 f202 	mul.w	r2, r1, r2
 8004ea2:	1a9b      	subs	r3, r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	0a5b      	lsrs	r3, r3, #9
 8004eac:	4a09      	ldr	r2, [pc, #36]	; (8004ed4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004eae:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb2:	09db      	lsrs	r3, r3, #7
 8004eb4:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	441a      	add	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	601a      	str	r2, [r3, #0]
}
 8004ec8:	bf00      	nop
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	00044b83 	.word	0x00044b83
 8004ed8:	3b9aca00 	.word	0x3b9aca00

08004edc <__cxa_pure_virtual>:
 8004edc:	b508      	push	{r3, lr}
 8004ede:	f000 f80d 	bl	8004efc <_ZSt9terminatev>

08004ee2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004ee2:	b508      	push	{r3, lr}
 8004ee4:	4780      	blx	r0
 8004ee6:	f000 f80e 	bl	8004f06 <abort>
	...

08004eec <_ZSt13get_terminatev>:
 8004eec:	4b02      	ldr	r3, [pc, #8]	; (8004ef8 <_ZSt13get_terminatev+0xc>)
 8004eee:	6818      	ldr	r0, [r3, #0]
 8004ef0:	f3bf 8f5b 	dmb	ish
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	20000020 	.word	0x20000020

08004efc <_ZSt9terminatev>:
 8004efc:	b508      	push	{r3, lr}
 8004efe:	f7ff fff5 	bl	8004eec <_ZSt13get_terminatev>
 8004f02:	f7ff ffee 	bl	8004ee2 <_ZN10__cxxabiv111__terminateEPFvvE>

08004f06 <abort>:
 8004f06:	b508      	push	{r3, lr}
 8004f08:	2006      	movs	r0, #6
 8004f0a:	f000 f873 	bl	8004ff4 <raise>
 8004f0e:	2001      	movs	r0, #1
 8004f10:	f7fd fbf8 	bl	8002704 <_exit>

08004f14 <__errno>:
 8004f14:	4b01      	ldr	r3, [pc, #4]	; (8004f1c <__errno+0x8>)
 8004f16:	6818      	ldr	r0, [r3, #0]
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	20000024 	.word	0x20000024

08004f20 <__libc_init_array>:
 8004f20:	b570      	push	{r4, r5, r6, lr}
 8004f22:	4d0d      	ldr	r5, [pc, #52]	; (8004f58 <__libc_init_array+0x38>)
 8004f24:	4c0d      	ldr	r4, [pc, #52]	; (8004f5c <__libc_init_array+0x3c>)
 8004f26:	1b64      	subs	r4, r4, r5
 8004f28:	10a4      	asrs	r4, r4, #2
 8004f2a:	2600      	movs	r6, #0
 8004f2c:	42a6      	cmp	r6, r4
 8004f2e:	d109      	bne.n	8004f44 <__libc_init_array+0x24>
 8004f30:	4d0b      	ldr	r5, [pc, #44]	; (8004f60 <__libc_init_array+0x40>)
 8004f32:	4c0c      	ldr	r4, [pc, #48]	; (8004f64 <__libc_init_array+0x44>)
 8004f34:	f000 f9b0 	bl	8005298 <_init>
 8004f38:	1b64      	subs	r4, r4, r5
 8004f3a:	10a4      	asrs	r4, r4, #2
 8004f3c:	2600      	movs	r6, #0
 8004f3e:	42a6      	cmp	r6, r4
 8004f40:	d105      	bne.n	8004f4e <__libc_init_array+0x2e>
 8004f42:	bd70      	pop	{r4, r5, r6, pc}
 8004f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f48:	4798      	blx	r3
 8004f4a:	3601      	adds	r6, #1
 8004f4c:	e7ee      	b.n	8004f2c <__libc_init_array+0xc>
 8004f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f52:	4798      	blx	r3
 8004f54:	3601      	adds	r6, #1
 8004f56:	e7f2      	b.n	8004f3e <__libc_init_array+0x1e>
 8004f58:	080054f8 	.word	0x080054f8
 8004f5c:	080054f8 	.word	0x080054f8
 8004f60:	080054f8 	.word	0x080054f8
 8004f64:	08005500 	.word	0x08005500

08004f68 <memcpy>:
 8004f68:	440a      	add	r2, r1
 8004f6a:	4291      	cmp	r1, r2
 8004f6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004f70:	d100      	bne.n	8004f74 <memcpy+0xc>
 8004f72:	4770      	bx	lr
 8004f74:	b510      	push	{r4, lr}
 8004f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f7e:	4291      	cmp	r1, r2
 8004f80:	d1f9      	bne.n	8004f76 <memcpy+0xe>
 8004f82:	bd10      	pop	{r4, pc}

08004f84 <memset>:
 8004f84:	4402      	add	r2, r0
 8004f86:	4603      	mov	r3, r0
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d100      	bne.n	8004f8e <memset+0xa>
 8004f8c:	4770      	bx	lr
 8004f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f92:	e7f9      	b.n	8004f88 <memset+0x4>

08004f94 <realloc>:
 8004f94:	4b02      	ldr	r3, [pc, #8]	; (8004fa0 <realloc+0xc>)
 8004f96:	460a      	mov	r2, r1
 8004f98:	4601      	mov	r1, r0
 8004f9a:	6818      	ldr	r0, [r3, #0]
 8004f9c:	f000 b8da 	b.w	8005154 <_realloc_r>
 8004fa0:	20000024 	.word	0x20000024

08004fa4 <_raise_r>:
 8004fa4:	291f      	cmp	r1, #31
 8004fa6:	b538      	push	{r3, r4, r5, lr}
 8004fa8:	4604      	mov	r4, r0
 8004faa:	460d      	mov	r5, r1
 8004fac:	d904      	bls.n	8004fb8 <_raise_r+0x14>
 8004fae:	2316      	movs	r3, #22
 8004fb0:	6003      	str	r3, [r0, #0]
 8004fb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fb6:	bd38      	pop	{r3, r4, r5, pc}
 8004fb8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004fba:	b112      	cbz	r2, 8004fc2 <_raise_r+0x1e>
 8004fbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004fc0:	b94b      	cbnz	r3, 8004fd6 <_raise_r+0x32>
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f000 f830 	bl	8005028 <_getpid_r>
 8004fc8:	462a      	mov	r2, r5
 8004fca:	4601      	mov	r1, r0
 8004fcc:	4620      	mov	r0, r4
 8004fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fd2:	f000 b817 	b.w	8005004 <_kill_r>
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d00a      	beq.n	8004ff0 <_raise_r+0x4c>
 8004fda:	1c59      	adds	r1, r3, #1
 8004fdc:	d103      	bne.n	8004fe6 <_raise_r+0x42>
 8004fde:	2316      	movs	r3, #22
 8004fe0:	6003      	str	r3, [r0, #0]
 8004fe2:	2001      	movs	r0, #1
 8004fe4:	e7e7      	b.n	8004fb6 <_raise_r+0x12>
 8004fe6:	2400      	movs	r4, #0
 8004fe8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004fec:	4628      	mov	r0, r5
 8004fee:	4798      	blx	r3
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	e7e0      	b.n	8004fb6 <_raise_r+0x12>

08004ff4 <raise>:
 8004ff4:	4b02      	ldr	r3, [pc, #8]	; (8005000 <raise+0xc>)
 8004ff6:	4601      	mov	r1, r0
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	f7ff bfd3 	b.w	8004fa4 <_raise_r>
 8004ffe:	bf00      	nop
 8005000:	20000024 	.word	0x20000024

08005004 <_kill_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4d07      	ldr	r5, [pc, #28]	; (8005024 <_kill_r+0x20>)
 8005008:	2300      	movs	r3, #0
 800500a:	4604      	mov	r4, r0
 800500c:	4608      	mov	r0, r1
 800500e:	4611      	mov	r1, r2
 8005010:	602b      	str	r3, [r5, #0]
 8005012:	f7fd fb67 	bl	80026e4 <_kill>
 8005016:	1c43      	adds	r3, r0, #1
 8005018:	d102      	bne.n	8005020 <_kill_r+0x1c>
 800501a:	682b      	ldr	r3, [r5, #0]
 800501c:	b103      	cbz	r3, 8005020 <_kill_r+0x1c>
 800501e:	6023      	str	r3, [r4, #0]
 8005020:	bd38      	pop	{r3, r4, r5, pc}
 8005022:	bf00      	nop
 8005024:	20000b10 	.word	0x20000b10

08005028 <_getpid_r>:
 8005028:	f7fd bb54 	b.w	80026d4 <_getpid>

0800502c <sbrk_aligned>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	4e0e      	ldr	r6, [pc, #56]	; (8005068 <sbrk_aligned+0x3c>)
 8005030:	460c      	mov	r4, r1
 8005032:	6831      	ldr	r1, [r6, #0]
 8005034:	4605      	mov	r5, r0
 8005036:	b911      	cbnz	r1, 800503e <sbrk_aligned+0x12>
 8005038:	f000 f8bc 	bl	80051b4 <_sbrk_r>
 800503c:	6030      	str	r0, [r6, #0]
 800503e:	4621      	mov	r1, r4
 8005040:	4628      	mov	r0, r5
 8005042:	f000 f8b7 	bl	80051b4 <_sbrk_r>
 8005046:	1c43      	adds	r3, r0, #1
 8005048:	d00a      	beq.n	8005060 <sbrk_aligned+0x34>
 800504a:	1cc4      	adds	r4, r0, #3
 800504c:	f024 0403 	bic.w	r4, r4, #3
 8005050:	42a0      	cmp	r0, r4
 8005052:	d007      	beq.n	8005064 <sbrk_aligned+0x38>
 8005054:	1a21      	subs	r1, r4, r0
 8005056:	4628      	mov	r0, r5
 8005058:	f000 f8ac 	bl	80051b4 <_sbrk_r>
 800505c:	3001      	adds	r0, #1
 800505e:	d101      	bne.n	8005064 <sbrk_aligned+0x38>
 8005060:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005064:	4620      	mov	r0, r4
 8005066:	bd70      	pop	{r4, r5, r6, pc}
 8005068:	20000b0c 	.word	0x20000b0c

0800506c <_malloc_r>:
 800506c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005070:	1ccd      	adds	r5, r1, #3
 8005072:	f025 0503 	bic.w	r5, r5, #3
 8005076:	3508      	adds	r5, #8
 8005078:	2d0c      	cmp	r5, #12
 800507a:	bf38      	it	cc
 800507c:	250c      	movcc	r5, #12
 800507e:	2d00      	cmp	r5, #0
 8005080:	4607      	mov	r7, r0
 8005082:	db01      	blt.n	8005088 <_malloc_r+0x1c>
 8005084:	42a9      	cmp	r1, r5
 8005086:	d905      	bls.n	8005094 <_malloc_r+0x28>
 8005088:	230c      	movs	r3, #12
 800508a:	603b      	str	r3, [r7, #0]
 800508c:	2600      	movs	r6, #0
 800508e:	4630      	mov	r0, r6
 8005090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005094:	4e2e      	ldr	r6, [pc, #184]	; (8005150 <_malloc_r+0xe4>)
 8005096:	f000 f89d 	bl	80051d4 <__malloc_lock>
 800509a:	6833      	ldr	r3, [r6, #0]
 800509c:	461c      	mov	r4, r3
 800509e:	bb34      	cbnz	r4, 80050ee <_malloc_r+0x82>
 80050a0:	4629      	mov	r1, r5
 80050a2:	4638      	mov	r0, r7
 80050a4:	f7ff ffc2 	bl	800502c <sbrk_aligned>
 80050a8:	1c43      	adds	r3, r0, #1
 80050aa:	4604      	mov	r4, r0
 80050ac:	d14d      	bne.n	800514a <_malloc_r+0xde>
 80050ae:	6834      	ldr	r4, [r6, #0]
 80050b0:	4626      	mov	r6, r4
 80050b2:	2e00      	cmp	r6, #0
 80050b4:	d140      	bne.n	8005138 <_malloc_r+0xcc>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	4631      	mov	r1, r6
 80050ba:	4638      	mov	r0, r7
 80050bc:	eb04 0803 	add.w	r8, r4, r3
 80050c0:	f000 f878 	bl	80051b4 <_sbrk_r>
 80050c4:	4580      	cmp	r8, r0
 80050c6:	d13a      	bne.n	800513e <_malloc_r+0xd2>
 80050c8:	6821      	ldr	r1, [r4, #0]
 80050ca:	3503      	adds	r5, #3
 80050cc:	1a6d      	subs	r5, r5, r1
 80050ce:	f025 0503 	bic.w	r5, r5, #3
 80050d2:	3508      	adds	r5, #8
 80050d4:	2d0c      	cmp	r5, #12
 80050d6:	bf38      	it	cc
 80050d8:	250c      	movcc	r5, #12
 80050da:	4629      	mov	r1, r5
 80050dc:	4638      	mov	r0, r7
 80050de:	f7ff ffa5 	bl	800502c <sbrk_aligned>
 80050e2:	3001      	adds	r0, #1
 80050e4:	d02b      	beq.n	800513e <_malloc_r+0xd2>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	442b      	add	r3, r5
 80050ea:	6023      	str	r3, [r4, #0]
 80050ec:	e00e      	b.n	800510c <_malloc_r+0xa0>
 80050ee:	6822      	ldr	r2, [r4, #0]
 80050f0:	1b52      	subs	r2, r2, r5
 80050f2:	d41e      	bmi.n	8005132 <_malloc_r+0xc6>
 80050f4:	2a0b      	cmp	r2, #11
 80050f6:	d916      	bls.n	8005126 <_malloc_r+0xba>
 80050f8:	1961      	adds	r1, r4, r5
 80050fa:	42a3      	cmp	r3, r4
 80050fc:	6025      	str	r5, [r4, #0]
 80050fe:	bf18      	it	ne
 8005100:	6059      	strne	r1, [r3, #4]
 8005102:	6863      	ldr	r3, [r4, #4]
 8005104:	bf08      	it	eq
 8005106:	6031      	streq	r1, [r6, #0]
 8005108:	5162      	str	r2, [r4, r5]
 800510a:	604b      	str	r3, [r1, #4]
 800510c:	4638      	mov	r0, r7
 800510e:	f104 060b 	add.w	r6, r4, #11
 8005112:	f000 f865 	bl	80051e0 <__malloc_unlock>
 8005116:	f026 0607 	bic.w	r6, r6, #7
 800511a:	1d23      	adds	r3, r4, #4
 800511c:	1af2      	subs	r2, r6, r3
 800511e:	d0b6      	beq.n	800508e <_malloc_r+0x22>
 8005120:	1b9b      	subs	r3, r3, r6
 8005122:	50a3      	str	r3, [r4, r2]
 8005124:	e7b3      	b.n	800508e <_malloc_r+0x22>
 8005126:	6862      	ldr	r2, [r4, #4]
 8005128:	42a3      	cmp	r3, r4
 800512a:	bf0c      	ite	eq
 800512c:	6032      	streq	r2, [r6, #0]
 800512e:	605a      	strne	r2, [r3, #4]
 8005130:	e7ec      	b.n	800510c <_malloc_r+0xa0>
 8005132:	4623      	mov	r3, r4
 8005134:	6864      	ldr	r4, [r4, #4]
 8005136:	e7b2      	b.n	800509e <_malloc_r+0x32>
 8005138:	4634      	mov	r4, r6
 800513a:	6876      	ldr	r6, [r6, #4]
 800513c:	e7b9      	b.n	80050b2 <_malloc_r+0x46>
 800513e:	230c      	movs	r3, #12
 8005140:	603b      	str	r3, [r7, #0]
 8005142:	4638      	mov	r0, r7
 8005144:	f000 f84c 	bl	80051e0 <__malloc_unlock>
 8005148:	e7a1      	b.n	800508e <_malloc_r+0x22>
 800514a:	6025      	str	r5, [r4, #0]
 800514c:	e7de      	b.n	800510c <_malloc_r+0xa0>
 800514e:	bf00      	nop
 8005150:	20000b08 	.word	0x20000b08

08005154 <_realloc_r>:
 8005154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005158:	4680      	mov	r8, r0
 800515a:	4614      	mov	r4, r2
 800515c:	460e      	mov	r6, r1
 800515e:	b921      	cbnz	r1, 800516a <_realloc_r+0x16>
 8005160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005164:	4611      	mov	r1, r2
 8005166:	f7ff bf81 	b.w	800506c <_malloc_r>
 800516a:	b92a      	cbnz	r2, 8005178 <_realloc_r+0x24>
 800516c:	f000 f83e 	bl	80051ec <_free_r>
 8005170:	4625      	mov	r5, r4
 8005172:	4628      	mov	r0, r5
 8005174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005178:	f000 f884 	bl	8005284 <_malloc_usable_size_r>
 800517c:	4284      	cmp	r4, r0
 800517e:	4607      	mov	r7, r0
 8005180:	d802      	bhi.n	8005188 <_realloc_r+0x34>
 8005182:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005186:	d812      	bhi.n	80051ae <_realloc_r+0x5a>
 8005188:	4621      	mov	r1, r4
 800518a:	4640      	mov	r0, r8
 800518c:	f7ff ff6e 	bl	800506c <_malloc_r>
 8005190:	4605      	mov	r5, r0
 8005192:	2800      	cmp	r0, #0
 8005194:	d0ed      	beq.n	8005172 <_realloc_r+0x1e>
 8005196:	42bc      	cmp	r4, r7
 8005198:	4622      	mov	r2, r4
 800519a:	4631      	mov	r1, r6
 800519c:	bf28      	it	cs
 800519e:	463a      	movcs	r2, r7
 80051a0:	f7ff fee2 	bl	8004f68 <memcpy>
 80051a4:	4631      	mov	r1, r6
 80051a6:	4640      	mov	r0, r8
 80051a8:	f000 f820 	bl	80051ec <_free_r>
 80051ac:	e7e1      	b.n	8005172 <_realloc_r+0x1e>
 80051ae:	4635      	mov	r5, r6
 80051b0:	e7df      	b.n	8005172 <_realloc_r+0x1e>
	...

080051b4 <_sbrk_r>:
 80051b4:	b538      	push	{r3, r4, r5, lr}
 80051b6:	4d06      	ldr	r5, [pc, #24]	; (80051d0 <_sbrk_r+0x1c>)
 80051b8:	2300      	movs	r3, #0
 80051ba:	4604      	mov	r4, r0
 80051bc:	4608      	mov	r0, r1
 80051be:	602b      	str	r3, [r5, #0]
 80051c0:	f7fd faaa 	bl	8002718 <_sbrk>
 80051c4:	1c43      	adds	r3, r0, #1
 80051c6:	d102      	bne.n	80051ce <_sbrk_r+0x1a>
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	b103      	cbz	r3, 80051ce <_sbrk_r+0x1a>
 80051cc:	6023      	str	r3, [r4, #0]
 80051ce:	bd38      	pop	{r3, r4, r5, pc}
 80051d0:	20000b10 	.word	0x20000b10

080051d4 <__malloc_lock>:
 80051d4:	4801      	ldr	r0, [pc, #4]	; (80051dc <__malloc_lock+0x8>)
 80051d6:	f000 b85d 	b.w	8005294 <__retarget_lock_acquire_recursive>
 80051da:	bf00      	nop
 80051dc:	20000b14 	.word	0x20000b14

080051e0 <__malloc_unlock>:
 80051e0:	4801      	ldr	r0, [pc, #4]	; (80051e8 <__malloc_unlock+0x8>)
 80051e2:	f000 b858 	b.w	8005296 <__retarget_lock_release_recursive>
 80051e6:	bf00      	nop
 80051e8:	20000b14 	.word	0x20000b14

080051ec <_free_r>:
 80051ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051ee:	2900      	cmp	r1, #0
 80051f0:	d044      	beq.n	800527c <_free_r+0x90>
 80051f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051f6:	9001      	str	r0, [sp, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f1a1 0404 	sub.w	r4, r1, #4
 80051fe:	bfb8      	it	lt
 8005200:	18e4      	addlt	r4, r4, r3
 8005202:	f7ff ffe7 	bl	80051d4 <__malloc_lock>
 8005206:	4a1e      	ldr	r2, [pc, #120]	; (8005280 <_free_r+0x94>)
 8005208:	9801      	ldr	r0, [sp, #4]
 800520a:	6813      	ldr	r3, [r2, #0]
 800520c:	b933      	cbnz	r3, 800521c <_free_r+0x30>
 800520e:	6063      	str	r3, [r4, #4]
 8005210:	6014      	str	r4, [r2, #0]
 8005212:	b003      	add	sp, #12
 8005214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005218:	f7ff bfe2 	b.w	80051e0 <__malloc_unlock>
 800521c:	42a3      	cmp	r3, r4
 800521e:	d908      	bls.n	8005232 <_free_r+0x46>
 8005220:	6825      	ldr	r5, [r4, #0]
 8005222:	1961      	adds	r1, r4, r5
 8005224:	428b      	cmp	r3, r1
 8005226:	bf01      	itttt	eq
 8005228:	6819      	ldreq	r1, [r3, #0]
 800522a:	685b      	ldreq	r3, [r3, #4]
 800522c:	1949      	addeq	r1, r1, r5
 800522e:	6021      	streq	r1, [r4, #0]
 8005230:	e7ed      	b.n	800520e <_free_r+0x22>
 8005232:	461a      	mov	r2, r3
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	b10b      	cbz	r3, 800523c <_free_r+0x50>
 8005238:	42a3      	cmp	r3, r4
 800523a:	d9fa      	bls.n	8005232 <_free_r+0x46>
 800523c:	6811      	ldr	r1, [r2, #0]
 800523e:	1855      	adds	r5, r2, r1
 8005240:	42a5      	cmp	r5, r4
 8005242:	d10b      	bne.n	800525c <_free_r+0x70>
 8005244:	6824      	ldr	r4, [r4, #0]
 8005246:	4421      	add	r1, r4
 8005248:	1854      	adds	r4, r2, r1
 800524a:	42a3      	cmp	r3, r4
 800524c:	6011      	str	r1, [r2, #0]
 800524e:	d1e0      	bne.n	8005212 <_free_r+0x26>
 8005250:	681c      	ldr	r4, [r3, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	6053      	str	r3, [r2, #4]
 8005256:	4421      	add	r1, r4
 8005258:	6011      	str	r1, [r2, #0]
 800525a:	e7da      	b.n	8005212 <_free_r+0x26>
 800525c:	d902      	bls.n	8005264 <_free_r+0x78>
 800525e:	230c      	movs	r3, #12
 8005260:	6003      	str	r3, [r0, #0]
 8005262:	e7d6      	b.n	8005212 <_free_r+0x26>
 8005264:	6825      	ldr	r5, [r4, #0]
 8005266:	1961      	adds	r1, r4, r5
 8005268:	428b      	cmp	r3, r1
 800526a:	bf04      	itt	eq
 800526c:	6819      	ldreq	r1, [r3, #0]
 800526e:	685b      	ldreq	r3, [r3, #4]
 8005270:	6063      	str	r3, [r4, #4]
 8005272:	bf04      	itt	eq
 8005274:	1949      	addeq	r1, r1, r5
 8005276:	6021      	streq	r1, [r4, #0]
 8005278:	6054      	str	r4, [r2, #4]
 800527a:	e7ca      	b.n	8005212 <_free_r+0x26>
 800527c:	b003      	add	sp, #12
 800527e:	bd30      	pop	{r4, r5, pc}
 8005280:	20000b08 	.word	0x20000b08

08005284 <_malloc_usable_size_r>:
 8005284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005288:	1f18      	subs	r0, r3, #4
 800528a:	2b00      	cmp	r3, #0
 800528c:	bfbc      	itt	lt
 800528e:	580b      	ldrlt	r3, [r1, r0]
 8005290:	18c0      	addlt	r0, r0, r3
 8005292:	4770      	bx	lr

08005294 <__retarget_lock_acquire_recursive>:
 8005294:	4770      	bx	lr

08005296 <__retarget_lock_release_recursive>:
 8005296:	4770      	bx	lr

08005298 <_init>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	bf00      	nop
 800529c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529e:	bc08      	pop	{r3}
 80052a0:	469e      	mov	lr, r3
 80052a2:	4770      	bx	lr

080052a4 <_fini>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	bf00      	nop
 80052a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052aa:	bc08      	pop	{r3}
 80052ac:	469e      	mov	lr, r3
 80052ae:	4770      	bx	lr
